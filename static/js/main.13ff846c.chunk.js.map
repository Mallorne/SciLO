{"version":3,"sources":["layouts/SideNav/index.js","layouts/BasicLayout/index.js","mocks/Questions.js","mocks/Tags.js","utils/RandomID.js","components/DefaultQuestionTypes/MultipleChoice.js","components/DefaultQuestionTypes/InputField.js","components/Variables/CreateVariableModal.js","networks/Endpoints.js","components/Forms/CreateQuestionForm.js","networks/PostQuestion.js","components/QuestionPreviews/BasicFrame.js","utils/FractionDisplay.js","pages/CreateQuestions/index.js","App.js","serviceWorker.js","index.js"],"names":["SideNav","Sider","es_layout","react_default","a","createElement","className","breakpoint","collapsible","onBreakpoint","broken","onCollapse","collapsed","type","menu","theme","mode","defaultSelectedKeys","Item","key","icon","React","Component","BasicLayout","footer","getContext","location","breadcrumbNameList","Header","Footer","Content","layout","SideNav_SideNav","style","marginLeft","breadcrumb","href","this","map","item","i","props","children","Fragment","react_document_title_default","title","Questions","text","tags","name","responses","answers","grade","single","dropdown","Option","es_select","tag","Tags_Option","randomID","Math","random","toString","substr","MultipleChoice","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","remove","k","state","filter","setState","changeOrder","add","nextKeys","concat","onDragEnd","result","destination","list","startIndex","endIndex","Array","from","_result$splice","splice","removed","slicedToArray","reorder","source","index","_this2","TextArea","input","Panel","collapse","getFieldDecorator","form","formItemLayout","labelCol","span","wrapperCol","formItems","react_beautiful_dnd_esm","draggableId","provided","snapshot","assign","draggableProps","ref","innerRef","card","size","bordered","isDragging","backgroundColor","dragHandleProps","es_form","label","required","id","validateTrigger","rules","whitespace","message","placeholder","width","marginRight","onClick","initialValue","input_number","formatter","value","parser","replace","defaultActiveKey","marginBottom","header","es_tag","up","down","extra","forceRender","autosize","minRows","maxRows","es_divider","droppableId","droppableProps","length","es_button","float","tooltip","arrowPointAtCenter","es_switch","defaultChecked","hidden","InputField","VariableCreateForm","create","_React$Component","_class","apply","arguments","inherits","createClass","_this$props","visible","onCancel","onCreate","getFieldValue","modal","okText","onOk","onChange","e","tokenSeparators","CreateVariableModal","handleCancel","close","handleCreate","formRef","validateFields","err","values","console","log","resetFields","saveFormRef","wrappedComponentRef","Endpoints","domain","port","endpoints","questions","address","methods","CreateQuestionForm","typeOfResponseToAdd","undefined","showVariableModal","r","answerOrder","swap","j","_ref","newOrder","forEach","getFormValues","parseTags","sortResponses","JSON","stringify","handleSubmit","preventDefault","question","axios","post","API","auth","username","password","headers","Content-Type","then","response","catch","error","preview","handlePreview","onSelectComponentChange","addComponent","group","showSearch","optionFilterProp","filterOption","option","toLowerCase","indexOf","addModal","confirm","content","cancelText","destroy","entries","answerIndex","answerID","sort","b","ButtonGroup","Group","InputField_InputField","event","stopPropagation","order","MultipleChoice_MultipleChoice","bodyStyle","CreateVariableModal_CreateVariableModal","Forms_CreateQuestionForm","BasicFrame","marked","highestWeight","renderTags","color","submit","keys","calculateMark","mark","answer","isArray","renderComponents","component","renderInput","renderDropDown","renderMultiple","empty","c","renderMark","padding","addonBefore","disabled","addonAfter","target","choices","RadioGroup","es_radio","CheckboxGroup","es_checkbox","optionStyle","display","height","lineHeight","options","Meta","Sum","max","o","marginTop","Formula","lib","inline","tex","CreateQuestions","colResponsive","xs","sm","md","lg","xl","row","gutter","col","background","minHeight","BasicFrame_BasicFrame","margin","Fraction","multiply","toTex","lambda","Expression","divide","Phi","subtract","question2","react_katex","FractionDisplay","App","BasicLayout_BasicLayout","CreateQuestions_CreateQuestions","Boolean","window","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13ff846c.chunk.js","sourcesContent":["import React from \"react\";\nimport {Icon, Menu, Layout} from \"antd\";\nimport \"./index.css\"\n\n/**\n * SideNav is the responsive collapsible side navigation bar on the left\n */\nexport default class SideNav extends React.Component {\n    render() {\n        const { Sider } = Layout;\n        return (\n            <Sider\n                className=\"SideNav\"\n                breakpoint=\"lg\"\n                //collapsedWidth=\"0\"\n                collapsible\n                onBreakpoint={broken => {\n                    //console.log(broken);\n                }}\n                onCollapse={(collapsed, type) => {\n                    //console.log(collapsed, type);\n                }}\n            >\n                <div className=\"logo\" />\n                <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\n                    <Menu.Item key=\"1\">\n                        <Icon type=\"user\" />\n                        <span className=\"nav-text\">Quiz</span>\n                    </Menu.Item>\n                    <Menu.Item key=\"2\">\n                        <Icon type=\"database\" />\n                        <span className=\"nav-text\">Question Bank</span>\n                    </Menu.Item>\n                    <Menu.Item key=\"3\">\n                        <Icon type=\"upload\" />\n                        <span className=\"nav-text\">nav 3</span>\n                    </Menu.Item>\n                    <Menu.Item key=\"4\">\n                        <Icon type=\"user\" />\n                        <span className=\"nav-text\">User</span>\n                    </Menu.Item>\n                </Menu>\n            </Sider>\n        );\n    }\n}","import React from \"react\";\nimport DocumentTitle from 'react-document-title';\nimport {Icon, Layout, Breadcrumb} from \"antd\";\nimport \"./index.css\";\nimport SideNav from \"../SideNav\";\n\n/**\n * The very basic layout for the entire app\n */\nexport default class BasicLayout extends React.Component {\n    footer = \"Project SciLo - Frontend\";\n\n    getContext = () => {\n        const location = \"SciLo\";\n        const breadcrumbNameList = [\"Question Bank\", \"Math 101\"];\n\n        return {\n            location,\n            breadcrumbNameList,\n        };\n    };\n\n    render() {\n        const {Header, Footer, Content} = Layout;\n\n        const layout = (\n            <Layout className=\"BasicLayout\">\n                <SideNav/>\n                <Layout style={{marginLeft: 200}}>\n                    <Header className=\"Header\">\n                        <Breadcrumb>\n                            <Breadcrumb.Item href=\"\">\n                                <Icon type=\"home\"/>\n                            </Breadcrumb.Item>\n\n                            {this.getContext().breadcrumbNameList.map(item => {\n                                    let i = 1;\n                                    return (\n                                        <Breadcrumb.Item key={i++}>\n                                            {item}\n                                        </Breadcrumb.Item>\n                                    )\n                                }\n                            )}\n                        </Breadcrumb>\n                    </Header>\n\n                    <Content className=\"Content\">\n                        {this.props.children}\n                    </Content>\n                    <Footer className=\"Footer\">\n                        {this.footer}\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n\n        return (\n            <React.Fragment>\n                <DocumentTitle title={this.getContext().location}>\n                    {layout}\n                </DocumentTitle>\n            </React.Fragment>\n        )\n    }\n}","export default [\n    {\n        title: \"Mock Question 1\",\n        text: \"Some basic mathematical calculations... Good Luck!\",\n        tags: [\n            {\n                name: \"Easy\"\n            },\n            {\n                name: \"Math\"\n            }\n        ],\n        responses: [\n            {\n                type: {\n                    name: \"input\",\n                },\n                text: \"What is the result of 1 + 1?\",\n                answers: [\n                    {\n                        text: \"2\",\n                        grade: 100,\n                    },\n                    {\n                        text: \"two\",\n                        grade: 100,\n                    },\n                    {\n                        text: \"0\",\n                        grade: 10,\n                    },\n                ]\n            },\n            {\n                type: {\n                    name: \"input\",\n                },\n                text: \"What is the result of 1.5 * 2?\",\n                answers: [\n                    {\n                        text: \"3\",\n                        grade: 100,\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        title: \"Mock Question 2\",\n        text: \"Some interesting multiple choice questions.\",\n        tags: [\n            {\n                name: \"Fun\"\n            }\n        ],\n        responses: [\n            {\n                type: {\n                    name: \"multiple\",\n                    single: true,\n                    dropdown: false,\n                },\n                text: \"Select 'Red'\",\n                answers: [\n                    {\n                        text: \"Blue\",\n                        grade: 0,\n                    },\n                    {\n                        text: \"Red\",\n                        grade: 100,\n                    },\n                    {\n                        text: \"red\",\n                        grade: 50,\n                    }\n                ]\n            },\n            {\n                type: {\n                    name: \"multiple\",\n                    single: false,\n                    dropdown: false,\n                },\n                text: \"Select red color\",\n                answers: [\n                    {\n                        text: \"Blue\",\n                        grade: -50,\n                    },\n                    {\n                        text: \"Red\",\n                        grade: 50,\n                    },\n                    {\n                        text: \"red\",\n                        grade: 50,\n                    }\n                ]\n            },\n            {\n                type: {\n                    name: \"multiple\",\n                    single: false,\n                    dropdown: true,\n                },\n                text: \"Select red color\",\n                answers: [\n                    {\n                        text: \"Blue\",\n                        grade: -50,\n                    },\n                    {\n                        text: \"Red\",\n                        grade: 50,\n                    },\n                    {\n                        text: \"red\",\n                        grade: 50,\n                    }\n                ]\n            }\n        ]\n    },\n\n\n]","/**\n * mock tags\n */\nimport { Select } from 'antd';\nimport React from \"react\";\n\nconst Option = Select.Option;\n\nconst tags = [\n    \"easy\",\n    \"normal\",\n    \"hard\",\n    \"bonus\",\n    \"mathematical\"\n];\n\n\nexport default tags.map(tag => <Option key={tag}>{tag}</Option>)","export default function randomID() {\n    return Math.random().toString(36).substr(2, 9)\n};\n","import React from \"react\";\n\nimport {\n    Form,\n    Input,\n    Icon,\n    Button,\n    Divider,\n    Card,\n    InputNumber,\n    Switch,\n    Tooltip,\n    Tag,\n    Collapse\n} from 'antd';\nimport theme from \"../../config/theme\"\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd'\nimport randomID from \"../../utils/RandomID\";\n\n/**\n * Multiple Choice form template\n */\nexport default class MultipleChoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            answers: []\n        }\n    }\n\n\n    /* remove an answer */\n    remove = k => {\n        // filter out the answer we do not want\n        const answers = this.state.answers.filter(key => key !== k);\n        this.setState({\n            answers\n        });\n        // re-order the answers\n        this.props.changeOrder(answers);\n    };\n\n    /* add an answer */\n    add = () => {\n        const answers = this.state.answers;\n        // generate a new id for the new answer\n        const nextKeys = answers.concat(randomID());\n        this.setState({\n            answers: nextKeys\n        });\n        // re-order the answers\n        this.props.changeOrder(nextKeys);\n    };\n\n    /* happen when the user has done dragging of the answer card */\n    onDragEnd = (result) => {\n        // a little function to help us with reordering the result\n        const reorder = (list, startIndex, endIndex) => {\n            const result = Array.from(list);\n            const [removed] = result.splice(startIndex, 1);\n            result.splice(endIndex, 0, removed);\n            return result;\n        };\n        // dropped outside the list\n        if (!result.destination) {\n            return;\n        }\n        const answers = reorder(\n            this.state.answers,\n            result.source.index,\n            result.destination.index\n        );\n        this.setState({\n            answers\n        });\n        // re-order the answers\n        this.props.changeOrder(answers);\n    };\n\n    render() {\n        const { TextArea } = Input;\n        const Panel = Collapse.Panel;\n        const { getFieldDecorator } = this.props.form;\n\n        // form layout css\n        const formItemLayout = {\n            labelCol: { span: 4 },\n            wrapperCol: { span: 20 },\n        };\n\n        // render the answer cards\n        const formItems = this.state.answers.map((k, index) => (\n            // k is the unique id of the answer which created in this.add()\n            <Draggable\n                key={\"drag_\"+k}\n                draggableId={\"drag_\"+k}\n                index={index}\n            >\n                {(provided, snapshot) => (\n                    <div\n                        key={k}\n                        {...provided.draggableProps}\n                        ref={provided.innerRef}\n                    >\n                        <Card\n                            size={\"small\"}\n                            bordered={snapshot.isDragging}\n                            style={{backgroundColor: snapshot.isDragging?\"white\":theme[\"@white\"]}}\n                            {...provided.dragHandleProps}\n                        >\n                            <Form.Item\n                                {...formItemLayout}\n                                label={\"choice \" + index}\n                                required={false}\n                                key={k}\n                            >\n                                {getFieldDecorator(`responses[${this.props.id}].answers[${k}].text`, {\n                                    validateTrigger: ['onChange', 'onBlur'],\n                                    rules: [\n                                        {\n                                            required: true,\n                                            whitespace: true,\n                                            message: \"Cannot have empty body choice.\",\n                                        },\n                                    ],\n                                })(<Input\n                                    placeholder=\"choice content\"\n                                    style={{width: '60%', marginRight: 8}}\n                                />)}\n                                <Icon\n                                    className=\"dynamic-delete-button\"\n                                    type=\"minus-circle-o\"\n                                    onClick={() => this.remove(k)}\n                                />\n                            </Form.Item>\n                            <Form.Item\n                                {...formItemLayout}\n                                label=\"Grade\"\n                            >\n                                {getFieldDecorator(`responses[${this.props.id}].answers[${k}].grade`, {\n                                    initialValue: index === 0 ? 100 : 0,\n                                })(<InputNumber\n                                    formatter={value => `${value}%`}\n                                    parser={value => value.replace('%', '')}\n                                />)}\n                            </Form.Item>\n                        </Card>\n                    </div>\n                )}\n            </Draggable>\n        ));\n\n\n        return (\n            <Collapse\n                defaultActiveKey={[this.props.id]}\n                style={{marginBottom: 12}}\n            >\n                <Panel\n                    header={\n                        <span>\n                        <Tag\n                            onClick={this.props.up}\n                            style={{marginLeft: 4}}\n                        >\n                            <Icon type=\"caret-up\" />\n                        </Tag>\n                        <Tag onClick={this.props.down}>\n                            <Icon type=\"caret-down\" />\n                        </Tag>\n                            {this.props.title}\n                    </span>\n                    }\n                    key={this.props.id}\n                    extra={\n                        <Icon\n                            type=\"delete\"\n                            onClick={this.props.remove}\n                        />\n                    }\n                    forceRender\n                >\n                    <DragDropContext onDragEnd={this.onDragEnd}>\n                        <Form.Item label=\"Text\" {...formItemLayout}>\n                            {getFieldDecorator(`responses[${this.props.id}].text`, {})(\n                            <TextArea\n                                autosize={{ minRows: 2, maxRows: 6 }}\n                                placeholder=\"description of this response\"\n                            />)}\n                        </Form.Item>\n                        <Divider />\n                        <Droppable droppableId={\"drop_\"+this.props.id}>\n                            {(provided) => (\n                                <div\n                                    {...provided.droppableProps}\n                                    ref={provided.innerRef}\n                                >\n                                    {formItems}\n                                    {provided.placeholder}\n                                </div>\n                            )}\n\n                        </Droppable>\n                        {(formItems.length !== 0) && <Divider/>}\n                        <Button\n                            type=\"default\"\n                            icon=\"plus\"\n                            onClick={this.add}\n                        >\n                            Add choice\n                        </Button>\n                        <div style={{float:\"right\"}}>\n                            <Tooltip\n                                title=\"Multiple correct answers?\"\n                                arrowPointAtCenter\n                            >\n                                <Tag>Single</Tag>\n                                {getFieldDecorator(`responses[${this.props.id}].type.single`, {initialValue: true})(\n                                    <Switch defaultChecked/>\n                                )}\n                            </Tooltip>\n                            <Divider type=\"vertical\"/>\n                            <Tooltip\n                                title=\"Use a dropdown menu for rendering (useful when having many options)\"\n                                arrowPointAtCenter\n                            >\n                                <Tag>Dropdown</Tag>\n                                {getFieldDecorator(`responses[${this.props.id}].type.dropdown`, {initialValue: false})(\n                                    <Switch/>\n                                )}\n                            </Tooltip>\n                        </div>\n                        {/* storing meta data*/}\n                        <span hidden={true}>\n                            {getFieldDecorator(`responses[${this.props.id}].type.name`, {initialValue: \"multiple\"})(<input/>)}\n                        </span>\n                    </DragDropContext>\n                </Panel>\n            </Collapse>\n        );\n    }\n}","import React from \"react\";\nimport {\n    Form,\n    Input,\n    Icon,\n    Button,\n    Divider,\n    Card,\n    InputNumber,\n    Tag,\n    Collapse\n} from 'antd';\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd'\nimport theme from \"../../config/theme\"\nimport randomID from \"../../utils/RandomID\"\n\n/**\n * Input field form template\n */\nexport default class InputField extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            answers: []\n        }\n    }\n\n    /* remove an answer */\n    remove = k => {\n        // filter out the answer we do not want\n        const answers = this.state.answers.filter(key => key !== k);\n        this.setState({\n            answers\n        });\n\n        // re-order the answers\n        this.props.changeOrder(answers);\n    };\n\n    /* add an answer */\n    add = () => {\n        const answers = this.state.answers;\n        // generate a new id for the new answer\n        const nextKeys = answers.concat(randomID());\n        this.setState({\n            answers: nextKeys\n        });\n\n        // re-order the answers\n        this.props.changeOrder(nextKeys);\n    };\n\n    /* happen when the user has done dragging of the answer card */\n    onDragEnd = (result) => {\n        // a little function to help us with reordering the result\n        const reorder = (list, startIndex, endIndex) => {\n            const result = Array.from(list);\n            const [removed] = result.splice(startIndex, 1);\n            result.splice(endIndex, 0, removed);\n            return result;\n        };\n        // dropped outside the list\n        if (!result.destination) {\n            return;\n        }\n        const answers = reorder(\n            this.state.answers,\n            result.source.index,\n            result.destination.index\n        );\n        this.setState({\n            answers\n        });\n        // re-order the answers\n        this.props.changeOrder(answers);\n    };\n\n    render() {\n        const { TextArea } = Input;\n        const Panel = Collapse.Panel;\n        const { getFieldDecorator } = this.props.form;\n\n        // form layout css\n        const formItemLayout = {\n            labelCol: { span: 4 },\n            wrapperCol: { span: 20 },\n        };\n\n        // render the answer cards\n        const formItems = this.state.answers.map((k, index) => (\n            // k is the unique id of the answer which created in this.add()\n            <Draggable\n                key={\"drag_\"+k}\n                draggableId={\"drag_\"+k}\n                index={index}\n            >\n                { (provided, snapshot) => (\n                    <div\n                        key={k}\n                        {...provided.draggableProps}\n                        ref={provided.innerRef}\n                    >\n                        <Card\n                            size={\"small\"}\n                            bordered={snapshot.isDragging}\n                            style={{backgroundColor: snapshot.isDragging?\"white\":theme[\"@white\"]}}\n                            {...provided.dragHandleProps}\n                        >\n                            <Form.Item\n                                {...formItemLayout}\n                                label={\"answers \" + index}\n                                required={false}\n                                key={k}\n                            >\n                                {getFieldDecorator(`responses[${this.props.id}].answers[${k}].text`, {\n                                    validateTrigger: ['onChange', 'onBlur'],\n                                    rules: [\n                                        {\n                                            required: true,\n                                            whitespace: true,\n                                            message: \"Cannot have empty body.\",\n                                        },\n                                    ],\n                                })(<Input\n                                    placeholder=\"enter an answer\"\n                                    style={{width: '60%', marginRight: 8}}\n                                />)}\n                                <Icon\n                                    className=\"dynamic-delete-button\"\n                                    type=\"minus-circle-o\"\n                                    onClick={() => this.remove(k)}\n                                />\n                            </Form.Item>\n                            <Form.Item\n                                {...formItemLayout}\n                                label=\"Grade\"\n                            >\n                                {getFieldDecorator(`responses[${this.props.id}].answers[${k}].grade`, {\n                                    initialValue: index === 0 ? 100 : 0,\n                                })(<InputNumber\n                                    formatter={value => `${value}%`}\n                                    parser={value => value.replace('%', '')}\n                                />)}\n                            </Form.Item>\n                        </Card>\n                    </div>\n                )\n            }\n            </Draggable>\n        ));\n\n\n        return (\n            <Collapse\n                defaultActiveKey={[this.props.id]}\n                style={{marginBottom: 12}}\n            >\n            <Panel\n                header={\n                    <span>\n                        <Tag\n                            onClick={this.props.up}\n                            style={{marginLeft: 4}}\n                        >\n                            <Icon type=\"caret-up\" />\n                        </Tag>\n                        <Tag onClick={this.props.down}>\n                            <Icon type=\"caret-down\" />\n                        </Tag>\n                        {this.props.title}\n                    </span>\n                }\n                key={this.props.id}\n                extra={\n                    <Icon\n                        type=\"delete\"\n                        onClick={this.props.remove}\n                    />\n                }\n                forceRender\n            >\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <Form.Item label=\"Text\" {...formItemLayout}>\n                        {getFieldDecorator(`responses[${this.props.id}].text`, {})(\n                            <TextArea\n                                autosize={{ minRows: 2, maxRows: 6 }}\n                                placeholder=\"description of this response\"\n                            />)}\n                    </Form.Item>\n                    <Divider />\n                    <Droppable droppableId={\"drop_\"+this.props.id}>\n                        {(provided) => (\n                            <div\n                                {...provided.droppableProps}\n                                ref={provided.innerRef}\n                            >\n                                {formItems}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                    {(formItems.length !== 0) && <Divider/>}\n                    <Button\n                        type=\"default\"\n                        icon=\"plus\"\n                        onClick={this.add}\n                    >\n                        Add a potential answer\n                    </Button>\n                    {/* storing meta data*/}\n                    <span hidden={true}>\n                        {getFieldDecorator(`responses[${this.props.id}].type.name`, {initialValue: \"input\"})(<input/>)}\n                    </span>\n                </DragDropContext>\n            </Panel>\n            </Collapse>\n        );\n    }\n}","import React from \"react\";\n\nimport {Modal, Form, Input, Select, Icon} from 'antd';\n\n/* the variable creation modal */\nconst VariableCreateForm = Form.create({ name: 'VariableCreateForm' })(\n    class extends React.Component {\n        render() {\n            const { visible, onCancel, onCreate, form } = this.props;\n            const { getFieldDecorator, getFieldValue } = form;\n            const Option = Select.Option;\n\n            const formItemLayout = {\n                labelCol: { span: 4 },\n                wrapperCol: { span: 20 },\n            };\n\n            return (\n                <Modal\n                    visible={visible}\n                    title=\"Create a new variable\"\n                    okText=\"Create\"\n                    onCancel={onCancel}\n                    onOk={onCreate}\n                >\n                    <Form>\n                        <Form.Item\n                            label=\"Name\"\n                            {...formItemLayout}\n                        >\n                            {getFieldDecorator('name', {\n                                rules: [{ required: true, message: 'Please input the name of the variable!' }],\n                            })(<Input />)}\n                        </Form.Item>\n                        <Form.Item\n                            label=\"Type\"\n                            {...formItemLayout}\n                        >\n                            {getFieldDecorator('type', {\n                                initialValue: \"fixed\",\n                            })(\n                                <Select\n                                    style={{ width: '100%' }}\n                                    onChange={(e)=>{this.setState({type: e})}}\n                                >\n                                    {\n                                        [\"fixed\", \"list\", \"random\"].map(\n                                            item=><Option key={item}>{item}</Option>\n                                        )\n                                    }\n                                </Select>\n                            )}\n                        </Form.Item>\n                        <Form.Item\n                            label=\"Value\"\n                            {...formItemLayout}\n                        >\n                            {getFieldDecorator('value', {\n                                rules: [{ required: true, message: 'Please input the value of the variable!' }],\n                            })(\n                                getFieldValue(\"type\") === \"list\" ? // if the type is \"list\" we render a multiple selection bar, else we render normal input\n                                    <Select\n                                        mode=\"tags\"\n                                        style={{ width: '100%' }}\n                                        tokenSeparators={['\\n']}\n                                        placeholder={\n                                            <span>Press <Icon type=\"enter\" /> to add / delete elements.</span>\n                                        }/>\n                                        :\n                                    <Input />\n                            )}\n                        </Form.Item>\n                    </Form>\n                </Modal>\n            );\n        }\n    },\n);\n\nexport default class CreateVariableModal extends React.Component {\n\n    handleCancel = () => {\n        this.props.close();\n    };\n\n    handleCreate = () => {\n        const form = this.formRef.props.form;\n        form.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            console.log('Received values of form: ', values);\n            form.resetFields();\n            this.props.close();\n        });\n    };\n\n    saveFormRef = formRef => {\n        this.formRef = formRef;\n    };\n\n    render() {\n        return (\n            <VariableCreateForm\n                wrappedComponentRef={this.saveFormRef}\n                visible={this.props.visible}\n                onCancel={this.handleCancel}\n                onCreate={this.handleCreate}\n            />\n        );\n    }\n}","const local = true;\nconst domain = local ? \"http://localhost\" : \"somewhere.backend\";\n\nexport default {\n    domain: domain,\n    port: 8000,\n    endpoints: {\n        questions: {\n            address: \"questions\",\n            methods: [\"GET\", \"POST\"],\n        },\n    }\n}\n\n","import React from \"react\";\n\nimport {Form, Input, Icon, Button, Select, Divider, Modal, Card} from 'antd';\nimport tags from \"../../mocks/Tags\";\nimport MultipleChoice from \"../DefaultQuestionTypes/MultipleChoice\";\nimport InputField from \"../DefaultQuestionTypes/InputField\";\nimport theme from \"../../config/theme\";\nimport CreateVariableModal from  \"../Variables/CreateVariableModal\"\nimport randomID from \"../../utils/RandomID\"\nimport PostQuestion from \"../../networks/PostQuestion\";\n\nclass CreateQuestionForm extends React.Component {\n\n    state = {\n        typeOfResponseToAdd: undefined,\n        showVariableModal: false,\n        responses: []\n    };\n\n    /* remove a response with id:k */\n    remove = k => {\n        // can use data-binding to get\n        let responses = this.state.responses;\n        console.log(k, responses);\n        responses = responses.filter(r=>r.key!==k);\n\n        // can use data-binding to set\n        this.setState({\n            responses\n        });\n\n    };\n\n    /* add a new response */\n    add = () => {\n        const responses = this.state.responses;\n\n        const nextKeys = responses.concat({\n            key: randomID(),\n            type: this.state.typeOfResponseToAdd,\n            answerOrder: []\n        });\n        this.setState({responses: nextKeys})\n    };\n\n    /* swap two responses order with id i and j */\n    swap = (i, j) => {\n        const responses = this.state.responses;\n        if (j < 0 || j >= responses.length) {\n            return\n        }\n        [responses[i], responses[j]] = [responses[j], responses[i]];\n        this.setState({responses});\n    };\n\n    /* change order of the answers in the response with id:k */\n    changeOrder = (k, newOrder) => {\n        let responses = this.state.responses;\n        responses.forEach((r)=>{\n            if (r.key===k) {\n                r.answerOrder = newOrder\n            }\n        });\n        this.setState({\n            responses\n        });\n    };\n\n    getFormValues = () => {\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                values.tags = this.parseTags(values.tags);\n                values.responses = this.sortResponses(values.responses);\n                console.log('Received values of form: ', values);\n                console.log(\"Json\", JSON.stringify(values));\n                return values;\n            }\n        });\n    }\n\n    /* triggered when the submit button is clicked */\n    handleSubmit = e => {\n        e.preventDefault();\n        const values = this.getFormValues();\n        PostQuestion(JSON.stringify(values));\n        this.props.preview(values);\n    };\n\n    /* triggered when the preview button is clicked */\n    handlePreview = e => {\n        e.preventDefault();\n        const values = this.getFormValues();\n        this.props.preview(values);\n    };\n\n    /* OnChange function of selection in the add a response modal */\n    onSelectComponentChange = e => {\n        this.setState({\n            typeOfResponseToAdd: e,\n        });\n    };\n\n    /* render function of adding a response */\n    addComponent = () => {\n        const Option = Select.Option;\n\n        // select component which is used to choose a response type\n        const group = <Select\n            showSearch\n            onChange={this.onSelectComponentChange}\n            style={{ width: 200 }}\n            placeholder=\"Select a template\"\n            optionFilterProp=\"children\"\n            filterOption={(input, option) =>\n                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n        >\n            <Option value=\"input\">Input Field</Option>\n            <Option value=\"multiple\">Multiple Choice</Option>\n            <Option value=\"custom\">Custom Templates</Option>\n        </Select>;\n\n        // show the modal\n        this.addModal = Modal.confirm({\n            title: 'Add Response',\n            content: group,\n            okText: 'OK',\n            cancelText: 'Cancel',\n            onOk: () => {\n                this.addModal.destroy();\n                this.add();\n            }\n        });\n    };\n\n    /* post processing of the tags information */\n    parseTags = (tags) => {\n        if (tags) {\n            return tags.map(tag => ({name: tag}));\n        }\n    };\n\n    /* sort the responses by their ids matching the order */\n    sortResponses = (responses) => {\n        const index = (key) => (this.state.responses.map(item => item.key).indexOf(key));\n\n        if (!responses) {\n            return\n        }\n\n        responses = Object.entries(responses);\n        responses.forEach(item => {\n            if (!item[1].answers) {return}\n            console.log(this.state.responses[index(item[0])].answerOrder);\n            const answerIndex = (answerID) => (this.state.responses[index(item[0])].answerOrder.indexOf(answerID));\n            item[1].answers = Object.entries(item[1].answers);\n            item[1].answers.sort((a,b) => (answerIndex(a[0]) > answerIndex(b[0])) ? 1 : -1);\n            item[1].answers = item[1].answers.map((item)=>(item[1]));\n        });\n\n        responses.sort((a,b) => (index(a[0]) > index(b[0])) ? 1 : -1);\n\n        return responses.map((item)=>(item[1]));\n    };\n\n\n    render() {\n        const { TextArea } = Input;\n        const ButtonGroup = Button.Group;\n        const { getFieldDecorator } = this.props.form;\n\n        const formItemLayout = {\n            labelCol: { span: 4 },\n            wrapperCol: { span: 20 },\n        };\n\n        const formItemLayoutWithoutLabel = {\n            wrapperCol: { span: 24 },\n        };\n\n        // render the responses\n        const formItems = this.state.responses.map((k, index) => {\n            switch (k.type) {\n                case \"input\":\n                    return (\n                        <InputField\n                            up={(event)=>{this.swap(index, index-1); event.stopPropagation();}}\n                            down={(event)=>{this.swap(index, index+1); event.stopPropagation();}}\n                            id={k.key}\n                            key={k.key}\n                            index={index}\n                            form={this.props.form}\n                            title={\"Input Field \"+ index}\n                            remove={()=>{this.remove(k.key)}}\n                            changeOrder={(order)=>{this.changeOrder(k.key, order)}}\n                        />);\n                case \"multiple\":\n                    return (\n                        <MultipleChoice\n                            up={(event)=>{this.swap(index, index-1); event.stopPropagation();}}\n                            down={(event)=>{this.swap(index, index+1); event.stopPropagation();}}\n                            id={k.key}\n                            key={k.key}\n                            index={index}\n                            form={this.props.form}\n                            title={\"Multiple Choice \"+ index}\n                            remove={()=>{this.remove(k.key)}}\n                            changeOrder={(order)=>{this.changeOrder(k.key, order)}}\n                        />);\n                default:\n                    return (<Card\n                        title={\"Custom Template \" + k.key}\n                        type=\"inner\"\n                        size=\"small\"\n                        bodyStyle={{backgroundColor: theme[\"@white\"]}}\n                        extra={\n                            <Icon type=\"delete\" onClick={()=>{this.remove(k.key)}}/>\n                        }>Some custom templates</Card>)\n            }\n        });\n\n        return (\n            <Form>\n                <Form.Item\n                    required\n                    label=\"Title\"\n                    {...formItemLayout}\n                >\n                    {getFieldDecorator('title', {\n                        rules: [{ required: true, message: 'Please enter a title for the question!' }],\n                    })(\n                        <Input placeholder=\"enter a title\" />\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"Text\"\n                    {...formItemLayout}\n                >\n                    {getFieldDecorator('text', {})(\n                        <TextArea\n                            autosize={{ minRows: 2, maxRows: 6 }}\n                            placeholder=\"description of the question\"\n                        />\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"Tags\"\n                    {...formItemLayout}\n                >\n                    {getFieldDecorator('tags', {})(\n                        <Select\n                            placeholder=\"select tags\"\n                            mode=\"tags\"\n                            style={{ width: '100%' }}\n                            tokenSeparators={[',']}\n                        >\n                            {tags}\n                        </Select>\n                    )}\n                </Form.Item>\n                <Divider/>\n                {formItems}\n                <Form.Item {...formItemLayoutWithoutLabel}>\n                    <ButtonGroup style={{width: \"100%\"}}>\n                        <Button\n                            style={{width: \"50%\"}}\n                            type=\"primary\"\n                            icon=\"plus\"\n                            onClick={this.addComponent}\n                        >\n                            New Response\n                        </Button>\n                        <Button\n                            style={{width: \"50%\"}}\n                            type=\"default\"\n                            icon=\"number\"\n                            onClick={()=>{this.setState({showVariableModal: true})}}\n                        >\n                            New Variable\n                        </Button>\n                    </ButtonGroup>\n                </Form.Item>\n                <Divider/>\n                <Form.Item>\n                    <Button type=\"primary\" onClick={this.handlePreview}>\n                        Preview\n                    </Button>\n                    <Button\n                        type=\"default\"\n                        style={{float: \"right\"}}\n                        onClick={this.handleSubmit}\n                    >\n                        Submit\n                    </Button>\n                </Form.Item>\n                <CreateVariableModal\n                    visible={this.state.showVariableModal}\n                    close={()=>{this.setState({showVariableModal: false})}}\n                />\n            </Form>\n        );\n    }\n}\n\nexport default Form.create({ name: 'CreateQuestionForm' })(CreateQuestionForm);","import axios from \"axios\";\nimport API from \"./Endpoints\";\n\nexport default function PostQuestion(question) {\n    axios\n        .post(API.domain+\":\"+ API.port + \"/api/\"+API.endpoints.questions.address,\n            question, {\n            auth: {username: \"tianqiwang\", password: \"123456\"},\n                headers: {\n                \"Content-Type\": \"application/json\"\n                }\n        })\n        .then(response => {\n            console.log(response);\n            return response;\n        })\n        .catch(error => console.log(error));\n}\n\n","import React from \"react\";\nimport {Button, Card, Divider, Input, Tag, Select, Radio, Checkbox, Empty} from \"antd\";\nimport theme from \"../../config/theme\";\n\n/* Preview Component */\nexport default class BasicFrame extends React.Component {\n\n    state = {\n        marked: false,\n        grade: \"\",\n        highestWeight: 0,\n        answers: {}\n    };\n\n    // render question's tags\n    renderTags = () => {\n        return this.props.question.tags.map(tag => (<Tag color={theme[\"@primary-color\"]}>{tag.name}</Tag>))\n    };\n\n    // save = () => {\n    //     message\n    //         .loading('Saving..', 2.5)\n    //         .then(() => message.success('Saved', 2.5))\n    //         .then(() => message.info('This is only a mock for saving', 2.5));\n    // };\n\n    // submit and mark the answer\n    submit = () => {\n        this.setState({marked: !this.state.marked});\n        let grade = 0;\n        Object.keys(this.state.answers).forEach(id=>{\n            if (this.props.question.responses[id-1]) {\n                grade += this.calculateMark(id, this.props.question.responses[id-1].answers);\n            }\n        });\n        this.setState({grade});\n    };\n\n    // calculate the mark of the response\n    calculateMark = (id, response) => {\n        let mark = 0;\n        const answer = this.state.answers[id];\n\n        if (!response) {\n            return mark;\n        }\n\n        response.forEach(r=>{\n            if (answer&&Array.isArray(answer)) {\n                answer.forEach(a=>{\n                    if (r.text === a) {\n                        mark += r.grade;\n                    }\n                })\n            }\n            else {\n                if (r.text === answer) {\n                    mark = r.grade;\n                }\n            }\n        });\n        return mark;\n    };\n\n    /* render the question response by type */\n    renderComponents = () => {\n        let id=0;\n        if (this.props.question.responses) {\n            return this.props.question.responses.map(component => {\n                id++;\n                switch (component.type.name) {\n                    case \"input\":\n                        return this.renderInput(component, id);\n                    case \"multiple\":\n                        if (component.type.dropdown) {\n                            return this.renderDropDown(component, id);\n                        }\n                        else {\n                            return this.renderMultiple(component, id);\n                        }\n                    default:\n                        return <span>Error Response</span>\n                }\n            })\n        }\n        else return <Empty/>\n    };\n\n    /* render the input type response */\n    renderInput = (c, id) => {\n        let renderMark;\n        const mark = this.calculateMark(id, c.answers);\n        // render the mark only when marked\n        renderMark = this.state.marked ? <span style={{color: \"red\"}} >{mark}</span> : undefined;\n\n        return (\n            <div\n                key={id}\n                style={{backgroundColor: theme[\"@white\"], marginBottom: \"12px\", padding: \"12px\"}}\n            >\n                <p>\n                    <strong>{c.text}</strong>\n                </p>\n                <Input\n                    addonBefore=\"Answer\"\n                    value={this.state.answers[id]}\n                    disabled={this.state.marked}\n                    addonAfter={renderMark}\n                    onChange={\n                        (e)=> {\n                            let answers = this.state.answers;\n                            answers[id] = e.target.value;\n                            this.setState({answers});\n                        }\n                    }\n                />\n            </div>\n        )\n    };\n    /* render the multiple-dropdown type response */\n    renderDropDown = (c, id) => {\n        let renderMark;\n        const mark = this.calculateMark(id, c.answers);\n        // render the mark only when marked\n        renderMark = this.state.marked ? <span style={{color: \"red\"}} >{mark}</span> : undefined;\n\n        let dropdown;\n        const Option = Select.Option;\n        dropdown = <Select\n            mode={c.type.single?\"default\":\"multiple\"}\n            style={{width:\"100%\"}}\n            onChange={\n                (e)=> {\n                    let answers = this.state.answers;\n                    answers[id] = e;\n                    this.setState({answers});\n                }\n            }\n            disabled={this.state.marked}\n        >\n            {\n                c.answers && // answers may be undefined\n                c.answers.map(r=><Option key={r.text} value={r.text}>{r.text}</Option>)\n            }\n        </Select>;\n\n        return (\n            <div\n                key={id}\n                style={{backgroundColor: theme[\"@white\"], marginBottom: \"12px\", padding: \"12px\"}}\n            >\n                <p>\n                    <strong>{c.text}</strong>\n                </p>\n                {dropdown}\n                {renderMark}\n            </div>\n        )\n    };\n\n    /* render the multiple-normal type response */\n    renderMultiple = (c, id) => {\n\n        let renderMark;\n        let choices;\n        const mark = this.calculateMark(id, c.answers);\n        renderMark = this.state.marked ? <span style={{color: \"red\"}} >{mark}</span> : undefined;\n\n        const RadioGroup = Radio.Group;\n        const CheckboxGroup = Checkbox.Group;\n\n        const optionStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px',\n        };\n\n        // only one correct answer\n        if (c.type.single) {\n            choices = (\n                <RadioGroup\n                    onChange={\n                        (e) => {\n                            let answers = this.state.answers;\n                            answers[id] = e.target.value;\n                            this.setState({answers});\n                        }\n                    }\n                    value={this.state.answers[id]}\n                    disabled={this.state.marked}\n                >\n                    {\n                        c.answers && // answer could be undefined\n                        c.answers.map(r=><Radio key={r.text} value={r.text} style={optionStyle}>{r.text}</Radio>)\n                    }\n                </RadioGroup>\n            );\n        }\n        // multiple selection\n        else {\n            choices =\n            <div className=\"verticalCheckBoxGroup\">\n                <CheckboxGroup\n                options={\n                    c.answers &&\n                    c.answers.map(r=>({label: r.text, value: r.text}))\n                }\n                disabled={this.state.marked}\n                onChange={\n                    (e) => {\n                        let answers = this.state.answers;\n                        answers[id] = e;\n                        this.setState({answers});\n                    }\n                }\n            />\n            </div>\n        }\n\n        return (\n            <div key={id} style={{backgroundColor: theme[\"@white\"], marginBottom: \"12px\", padding: \"12px\"}}>\n                <p><strong>{c.text}</strong></p>\n                {choices}\n                {renderMark}\n            </div>\n        )\n    };\n\n    render() {\n        const { Meta } = Card;\n\n        let Sum = 0;\n        if (this.props.question.responses) {\n            this.props.question.responses.forEach(c=> {\n                if (c.answers) {\n                    if (c.type.single!==false  || c.type.name !== \"multiple\") {\n                        Sum += Math.max.apply(Math, c.answers.map(function(o) { return o.grade; }));\n                    }\n                    else {\n                        c.answers.forEach(r => {\n                            if (r.grade > 0) {\n                                Sum += r.grade;\n                            }\n                        })\n                    }\n                }\n            });\n        }\n\n        return (\n            <div>\n                <Card\n                    type={\"inner\"}\n                    title={this.props.question.title}\n                    extra={this.state.grade+\"/\"+Sum}\n                >\n                    <Meta\n                        title={this.props.question.text}\n                        //description={this.renderTags()}\n                    />\n                    <Divider style={{marginTop: \"12px\", marginBottom: \"12px\"}}/>\n                    {this.renderComponents()}\n                    <Divider/>\n                    <Button type=\"danger\" icon=\"upload\" onClick={this.submit}>Submit</Button>\n                </Card>\n            </div>\n        )\n    }\n}","\nimport React from 'react';\nimport { Fraction, toTex, Expression } from 'algebra.js';\nimport { Node, Context } from 'react-mathjax2';\nimport { InlineMath } from 'react-katex';\n\nfunction Formula(props) {\n    return (\n        <Context input=\"tex\">\n            <Node inline>{props.tex}</Node>\n        </Context>\n    );\n}\n\nexport default function FractionDisplay() {\n    const a = new Fraction(1, 5);\n    const b = new Fraction(2, 7);\n    const answer = a.multiply(b);\n\n    const question = <Formula tex={`${toTex(a)} × ${toTex(b)} = ${toTex(answer)}`} />;\n    const lambda = new Expression(\"lambda\").add(3).divide(4);\n    const Phi = new Expression(\"Phi\").subtract(new Fraction(1, 5)).add(lambda);\n    const question2 =  <InlineMath>{toTex(Phi)}</InlineMath>;\n\n    return (\n        <div>\n            {question}\n            {question2}\n        </div>\n    );\n}","import React from \"react\";\nimport {Col, Divider, Row} from \"antd\";\nimport questions from \"../../mocks/Questions\";\nimport CreateQuestionForm from \"../../components/Forms/CreateQuestionForm\";\nimport BasicFrame from \"../../components/QuestionPreviews/BasicFrame\";\nimport FractionDisplay from \"../../utils/FractionDisplay\";\n\nexport default class CreateQuestions extends React.Component {\n\n    state = {\n    };\n\n    render() {\n\n        const colResponsive = {\n            xs: 24,\n            sm: 24,\n            md: 24,\n            lg: 24,\n            xl: 12\n        };\n\n        const divider = {\n            xs: 24,\n            sm: 24,\n            md: 24,\n            lg: 24,\n            xl: 0\n        };\n\n        return (\n            <Row gutter={8}>\n                <Col {...colResponsive} >\n                    <div style={{ padding: 24, background: '#fff', minHeight: \"80vh\" }}>\n                        <h1>New Question</h1>\n                        <CreateQuestionForm preview={(question)=>(this.setState({question}))}/>\n                    </div>\n                </Col>\n                <Col {...divider}><div><Divider/></div></Col>\n                <Col {...colResponsive}>\n                    <div style={{ padding: 24, background: '#fff', minHeight: \"80vh\" }}>\n                        <h1>Preview</h1>\n                        {this.state.question && <BasicFrame key={this.state.question.title} question={this.state.question}/>}\n                        {questions.map(question=>(<span key={question.title} style={{margin: 16}}><BasicFrame question={question}/></span>))}\n                        {FractionDisplay()}\n                    </div>\n                </Col>\n            </Row>\n\n        )\n    }\n}","import React from 'react';\nimport './App.css';\nimport BasicLayout from \"./layouts/BasicLayout\";\nimport CreateQuestions from \"./pages/CreateQuestions\";\n\nexport default class App extends React.Component{\n    render() {\n        return (\n            <BasicLayout>\n                {/*<QuestionBankTable/>*/}\n                <CreateQuestions/>\n            </BasicLayout>\n        )\n    }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}