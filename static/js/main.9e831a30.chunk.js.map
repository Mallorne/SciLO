{"version":3,"sources":["layouts/SideNav/index.js","mocks/QuestionBankTable.js","layouts/SketchQuestionBank.js","pages/QuestionBankTable/index.js","layouts/BasicLayout/index.js","mocks/Questions.js","mocks/Tags.js","components/DefaultQuestionTypes/MultipleChoice.js","utils/RandomID.js","components/DefaultQuestionTypes/InputField.js","components/Variables/CreateVariableModal.js","components/Forms/CreateQuestionForm.js","components/QuestionPreviews/BasicFrame.js","pages/CreateQuestions/index.js","utils/FractionDisplay.js","App.js","serviceWorker.js","index.js"],"names":["SideNav","Sider","es_layout","react_default","a","createElement","className","breakpoint","collapsible","onBreakpoint","broken","onCollapse","collapsed","type","menu","theme","mode","defaultSelectedKeys","Item","key","icon","React","Component","mocks_QuestionBankTable","title","context","tags","BasicLayout","footer","_this$props","this","props","location","breadcrumbNameList","Header","Footer","Content","layout","SideNav_SideNav","style","marginLeft","breadcrumb","href","getContext","map","item","i","children","Fragment","react_document_title_default","Questions","text","name","responses","answers","grade","single","dropdown","Option","es_select","tag","Tags_Option","MultipleChoice","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","remove","k","state","filter","setState","changeOrder","add","nextKeys","concat","Math","random","toString","substr","onDragEnd","result","destination","list","startIndex","endIndex","Array","from","_result$splice","splice","removed","slicedToArray","reorder","source","index","id","_this2","TextArea","input","Panel","collapse","_this$props$form","form","getFieldDecorator","getFieldValue","initialValue","formItemLayout","labelCol","span","wrapperCol","formItems","react_beautiful_dnd_esm","draggableId","provided","snapshot","assign","draggableProps","ref","innerRef","card","size","bordered","isDragging","backgroundColor","dragHandleProps","es_form","label","required","validateTrigger","rules","whitespace","message","placeholder","width","marginRight","onClick","input_number","formatter","value","parser","replace","defaultActiveKey","marginBottom","header","es_tag","up","down","extra","forceRender","autosize","minRows","maxRows","es_divider","droppableId","droppableProps","length","es_button","float","tooltip","arrowPointAtCenter","es_switch","defaultChecked","hidden","InputField","randomID","VariableCreateForm","create","_React$Component","_class","apply","arguments","inherits","createClass","visible","onCancel","onCreate","modal","okText","onOk","es_radio","Group","CreateVariableModal","handleCancel","close","handleCreate","formRef","validateFields","err","values","console","log","resetFields","saveFormRef","wrappedComponentRef","CreateQuestionForm","typeOfComponentToAdd","undefined","showVariableModal","r","answerOrder","swap","j","_ref","newOrder","forEach","handleSubmit","e","preventDefault","parseTags","sortResponses","JSON","stringify","preview","onSelectComponentChange","addComponent","group","showSearch","onChange","optionFilterProp","filterOption","option","toLowerCase","indexOf","addModal","confirm","content","cancelText","args","destroy","entries","answerIndex","answerID","sort","b","ButtonGroup","getFieldsValue","pairs","InputField_InputField","event","stopPropagation","order","MultipleChoice_MultipleChoice","bodyStyle","tokenSeparators","CreateVariableModal_CreateVariableModal","Forms_CreateQuestionForm","BasicFrame","marked","highestWeight","renderComponents","question","component","renderInput","renderDropDown","renderMultiple","empty","c","renderMark","mark","calculateMark","color","padding","addonBefore","disabled","addonAfter","target","choices","RadioGroup","CheckboxGroup","es_checkbox","optionStyle","display","height","lineHeight","options","renderTags","save","loading","then","success","info","submit","keys","response","answer","isArray","Meta","Sum","max","o","marginTop","CreateQuestions","colResponsive","xs","sm","md","lg","xl","row","gutter","col","background","minHeight","BasicFrame_BasicFrame","questions","margin","Fraction","lambda","multiply","Expression","divide","Phi","subtract","react_katex","toTex","FractionDisplay","App","BasicLayout_BasicLayout","CreateQuestions_CreateQuestions","Boolean","window","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e831a30.chunk.js","sourcesContent":["import React from \"react\";\nimport {Icon, Menu, Layout} from \"antd\";\nimport \"./index.css\"\n\n/**\n * SideNav is the responsive collapsible side navigation bar on the left\n */\nexport default class SideNav extends React.Component {\n    render() {\n        const { Sider } = Layout;\n        return (\n            <Sider\n                className=\"SideNav\"\n                breakpoint=\"lg\"\n                //collapsedWidth=\"0\"\n                collapsible\n                onBreakpoint={broken => {\n                    //console.log(broken);\n                }}\n                onCollapse={(collapsed, type) => {\n                    //console.log(collapsed, type);\n                }}\n            >\n                <div className=\"logo\" />\n                <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\n                    <Menu.Item key=\"1\">\n                        <Icon type=\"user\" />\n                        <span className=\"nav-text\">Quiz</span>\n                    </Menu.Item>\n                    <Menu.Item key=\"2\">\n                        <Icon type=\"database\" />\n                        <span className=\"nav-text\">Question Bank</span>\n                    </Menu.Item>\n                    <Menu.Item key=\"3\">\n                        <Icon type=\"upload\" />\n                        <span className=\"nav-text\">nav 3</span>\n                    </Menu.Item>\n                    <Menu.Item key=\"4\">\n                        <Icon type=\"user\" />\n                        <span className=\"nav-text\">User</span>\n                    </Menu.Item>\n                </Menu>\n            </Sider>\n        );\n    }\n}","/**\n * Mock data of questions in the question bank table\n */\nexport default [\n    {\n        key: '1',\n        title: 'basic calculation 1',\n        context: \"1+2=?\",\n        tags: ['simple', 'addition'],\n    },\n    {\n        key: '2',\n        title: 'basic calculation 2',\n        context: \"what is the result of 3 * 5?\",\n        tags: ['multiplication'],\n    },\n    {\n        key: '3',\n        title: 'bonus question 1',\n        context: \"what is the derivative of x^4+x^2+1/x+5?\",\n        tags: ['difficult', 'bonus', 'derivative'],\n    },\n    {\n        key: '1-1',\n        title: 'basic calculation 3',\n           context: \"5+2=?\",\n        tags: ['easy', 'addition'],\n    },\n    {\n        key: '2-2',\n        title: 'basic calculation 4',\n        context: \"what is the result of 7 / 5?\",\n        tags: ['division'],\n    },\n    {\n        key: '3-3',\n        title: 'bonus question 2',\n        context: \"what is the derivative of x^5?\",\n        tags: ['easy', 'bonus', 'derivative'],\n    },\n]","import React from \"react\";\nimport Highlighter from 'react-highlight-words';\nimport {Button, Divider, Icon, Layout, Table, Tag, Breadcrumb, Menu, Input} from \"antd\";\nimport SideNav from \"./SideNav\";\nimport data from \"../mocks/QuestionBankTable.js\";\n\nexport default class SketchQuestionBank extends React.Component {\n    state = {\n        searchText: '',\n        selectedRowKeys: [],\n\n    };\n\n    onSelectChange = selectedRowKeys => {\n        console.log('selectedRowKeys changed: ', selectedRowKeys);\n        this.setState({ selectedRowKeys });\n    };\n\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm)}\n                    icon=\"search\"\n                    size=\"small\"\n                    style={{ width: 90, marginRight: 8 }}\n                >\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => (\n            <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n        ),\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text => (\n            <Highlighter\n                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                searchWords={[this.state.searchText]}\n                autoEscape\n                textToHighlight={text.toString()}\n            />\n        ),\n    });\n\n    handleSearch = (selectedKeys, confirm) => {\n        confirm();\n        this.setState({ searchText: selectedKeys[0] });\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({ searchText: '' });\n    };\n\n\n    render() {\n        const { Header, Footer, Content } = Layout;\n\n\n        let filteredInfo = this.state.filteredValue;\n        const selectedRowKeys = this.state.selectedRowKeys;\n        const rowSelection = {\n            selectedRowKeys,\n            onChange: this.onSelectChange,\n        };\n        const hasSelected = selectedRowKeys.length > 0;\n\n        filteredInfo = filteredInfo || {};\n        const columns = [\n            {\n                title: 'Title',\n                dataIndex: 'title',\n                key: 'title',\n                render: text => <a href=\"javascript:;\">{text}</a>,\n                ...this.getColumnSearchProps('title')\n            },\n            {\n                title: 'Context',\n                dataIndex: 'context',\n                key: 'context',\n                ...this.getColumnSearchProps('context')\n            },\n            {\n                title: 'Tags',\n                key: 'tags',\n                dataIndex: 'tags',\n                render: tags => (\n                    <span>\n        {tags.map(tag => {\n            let color = tag.length > 5 ? 'geekblue' : 'green';\n            if (tag === 'difficult') {\n                color = 'volcano';\n            }\n            return (\n                <Tag color={color} key={tag}>\n                    {tag.toUpperCase()}\n                </Tag>\n            );\n        })}\n      </span>\n                ),\n                filters: [{ text: 'easy', value: 'easy' }, { text: 'bonus', value: 'bonus' }],\n                filteredValue: filteredInfo.name || null,\n            },\n            {\n                title: 'Action',\n                key: 'action',\n                render: (text, record) => (\n                    <span>\n        <a href=\"javascript:;\">Edit {record.name}</a>\n        <Divider type=\"vertical\" />\n        <a href=\"javascript:;\">Delete</a>\n      </span>\n                ),\n            },\n        ];\n\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <SideNav/>\n                <Layout>\n                    <Header style={{ background: '#fff', padding: '24px 24px 24px' }} >\n                        <Breadcrumb>\n                            <Breadcrumb.Item href=\"\">\n                                <Icon type=\"home\" />\n                            </Breadcrumb.Item>\n                            <Breadcrumb.Item href=\"\">\n                                <Icon type=\"database\" />\n                                <span>Question Bank</span>\n                            </Breadcrumb.Item>\n                            <Breadcrumb.Item>Math 101</Breadcrumb.Item>\n                        </Breadcrumb>\n                    </Header>\n                    <Content style={{ margin: '24px 16px 0' }}>\n                        <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                            <Table size=\"middle\" rowSelection={rowSelection} columns={columns} dataSource={data} />\n                            <Button icon=\"plus\" type=\"primary\">New</Button>\n                            <Button icon=\"file\" type=\"success\" disabled={!hasSelected} style={{margin: \"0 0 0 16px\"}}>Generate Quiz</Button>\n                        </div>\n\n                    </Content>\n                    <Footer style={{ textAlign: 'center' }}>Concept Sketch</Footer>\n                </Layout>\n            </Layout>\n        )\n    }\n}","import React from \"react\";\nimport Highlighter from 'react-highlight-words';\nimport {Button, Divider, Icon, Layout, Table, Tag, Breadcrumb, Menu, Input} from \"antd\";\nimport data from \"../../mocks/QuestionBankTable.js\";\n\n/**\n * Question table for the question bank section\n */\nexport default class QuestionBankTable extends React.Component {\n    state = {\n        searchText: '',\n        selectedRowKeys: [],\n\n    };\n\n    onSelectChange = selectedRowKeys => {\n        // console.log('selectedRowKeys changed: ', selectedRowKeys);\n        this.setState({ selectedRowKeys });\n    };\n\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm)}\n                    icon=\"search\"\n                    size=\"small\"\n                    style={{ width: 90, marginRight: 8 }}\n                >\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => (\n            <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n        ),\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text => (\n            <Highlighter\n                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                searchWords={[this.state.searchText]}\n                autoEscape\n                textToHighlight={text.toString()}\n            />\n        ),\n    });\n\n    handleSearch = (selectedKeys, confirm) => {\n        confirm();\n        this.setState({ searchText: selectedKeys[0] });\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({ searchText: '' });\n    };\n\n\n    render() {\n        let filteredInfo = this.state.filteredValue;\n        const selectedRowKeys = this.state.selectedRowKeys;\n        const rowSelection = {\n            selectedRowKeys,\n            onChange: this.onSelectChange,\n        };\n        const hasSelected = selectedRowKeys.length > 0;\n\n        filteredInfo = filteredInfo || {};\n        const columns = [\n            {\n                title: 'Title',\n                dataIndex: 'title',\n                key: 'title',\n                render: text => <a href=\"javascript:;\">{text}</a>,\n                ...this.getColumnSearchProps('title')\n            },\n            {\n                title: 'Context',\n                dataIndex: 'context',\n                key: 'context',\n                ...this.getColumnSearchProps('context')\n            },\n            {\n                title: 'Tags',\n                key: 'tags',\n                dataIndex: 'tags',\n                render: tags => (\n                    <span>\n                        {tags.map(tag => {\n                            let color = tag.length > 5 ? 'geekblue' : 'green';\n                            if (tag === 'difficult') {\n                                color = 'volcano';\n                            }\n                            return (\n                                <Tag color={color} key={tag}>\n                                    {tag.toUpperCase()}\n                                </Tag>\n                            );\n                        })}\n                    </span>\n                ),\n                filters: [{ text: 'easy', value: 'easy' }, { text: 'bonus', value: 'bonus' }],\n                filteredValue: filteredInfo.name || null,\n            },\n            {\n                title: 'Action',\n                key: 'action',\n                render: (text, record) => (\n                    <span>\n                        <a href=\"javascript:;\">Edit {record.name}</a>\n                        <Divider type=\"vertical\" />\n                        <a href=\"javascript:;\">Delete</a>\n                    </span>\n                ),\n            },\n        ];\n\n        return (\n            <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <Table size=\"middle\" rowSelection={rowSelection} columns={columns} dataSource={data} />\n                <Button icon=\"plus\" type=\"primary\">New</Button>\n                <Button icon=\"file\" type=\"success\" disabled={!hasSelected} style={{margin: \"0 0 0 16px\"}}>Generate Quiz</Button>\n            </div>\n        )\n    }\n}","import React, {Suspense} from \"react\";\nimport DocumentTitle from 'react-document-title';\nimport {Button, Icon, Layout, Breadcrumb} from \"antd\";\nimport \"./index.css\";\nimport SideNav from \"../SideNav\";\n\n/**\n * The very basic layout for the entire app\n */\nexport default class BasicLayout extends React.Component {\n    footer = \"Project SciLo - Frontend\";\n\n    getContext() {\n        let {location, breadcrumbNameList} = this.props;\n        location = \"SciLo\";\n        breadcrumbNameList = [\"Question Bank\", \"Math 101\"];\n\n        return {\n            location,\n            breadcrumbNameList,\n        };\n    }\n\n    render() {\n        const {Header, Footer, Content} = Layout;\n\n        const layout = (\n            <Layout className=\"BasicLayout\">\n                <SideNav/>\n                <Layout style={{marginLeft: 200}}>\n                    <Header className=\"Header\">\n                        <Breadcrumb>\n                            <Breadcrumb.Item href=\"\">\n                                <Icon type=\"home\"/>\n                            </Breadcrumb.Item>\n\n                            {this.getContext().breadcrumbNameList.map(item => {\n                                    let i = 1;\n                                    return (\n                                        <Breadcrumb.Item key={i++}>\n                                            {item}\n                                        </Breadcrumb.Item>\n                                    )\n                                }\n                            )}\n                        </Breadcrumb>\n                    </Header>\n\n                    <Content className=\"Content\">\n                        {this.props.children}\n                    </Content>\n                    <Footer className=\"Footer\">\n                        {this.footer}\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n\n        return (\n            <React.Fragment>\n                <DocumentTitle title={this.getContext().location}>\n                    {layout}\n                </DocumentTitle>\n            </React.Fragment>\n        )\n    }\n}","export default [\n    {\n        title: \"Mock Question 1\",\n        text: \"Some basic mathematical calculations... Good Luck!\",\n        tags: [\n            {\n                name: \"Easy\"\n            },\n            {\n                name: \"Math\"\n            }\n        ],\n        responses: [\n            {\n                type: {\n                    name: \"input\",\n                },\n                text: \"What is the result of 1 + 1?\",\n                answers: [\n                    {\n                        text: \"2\",\n                        grade: 100,\n                    },\n                    {\n                        text: \"two\",\n                        grade: 100,\n                    },\n                    {\n                        text: \"0\",\n                        grade: 10,\n                    },\n                ]\n            },\n            {\n                type: {\n                    name: \"input\",\n                },\n                text: \"What is the result of 1.5 * 2?\",\n                answers: [\n                    {\n                        text: \"3\",\n                        grade: 100,\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        title: \"Mock Question 2\",\n        text: \"Some interesting multiple choice questions.\",\n        tags: [\n            {\n                name: \"Fun\"\n            }\n        ],\n        responses: [\n            {\n                type: {\n                    name: \"multiple\",\n                    single: true,\n                    dropdown: false,\n                },\n                text: \"Select 'Red'\",\n                answers: [\n                    {\n                        text: \"Blue\",\n                        grade: 0,\n                    },\n                    {\n                        text: \"Red\",\n                        grade: 100,\n                    },\n                    {\n                        text: \"red\",\n                        grade: 50,\n                    }\n                ]\n            },\n            {\n                type: {\n                    name: \"multiple\",\n                    single: false,\n                    dropdown: false,\n                },\n                text: \"Select red color\",\n                answers: [\n                    {\n                        text: \"Blue\",\n                        grade: -50,\n                    },\n                    {\n                        text: \"Red\",\n                        grade: 50,\n                    },\n                    {\n                        text: \"red\",\n                        grade: 50,\n                    }\n                ]\n            },\n            {\n                type: {\n                    name: \"multiple\",\n                    single: false,\n                    dropdown: true,\n                },\n                text: \"Select red color\",\n                answers: [\n                    {\n                        text: \"Blue\",\n                        grade: -50,\n                    },\n                    {\n                        text: \"Red\",\n                        grade: 50,\n                    },\n                    {\n                        text: \"red\",\n                        grade: 50,\n                    }\n                ]\n            }\n        ]\n    },\n\n\n]","/**\n * mock tags\n */\nimport { Select } from 'antd';\nimport React from \"react\";\n\nconst Option = Select.Option;\n\nconst tags = [\n    \"easy\",\n    \"normal\",\n    \"hard\",\n    \"bonus\",\n    \"mathematical\"\n];\n\n\nexport default tags.map(tag => <Option key={tag}>{tag}</Option>)","import React from \"react\";\n\nimport {\n    Form,\n    Input,\n    Icon,\n    Button,\n    Select,\n    Divider,\n    Card,\n    Radio,\n    Checkbox,\n    Col,\n    InputNumber,\n    Switch,\n    Tooltip, Tag, Row, Collapse\n} from 'antd';\nimport tags from \"../../mocks/Tags\";\nimport theme from \"../../config/theme\"\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd'\nimport randomID from \"../../utils/RandomID\";\n\n/**\n * Multiple Choice form template\n */\nexport default class MultipleChoice extends React.Component {\n    constructor(props) {\n        super(props);\n        this.id = 0;\n        this.state = {\n            answers: []\n        }\n    }\n\n\n    /* remove an answer */\n    remove = k => {\n        // can use data-binding to get\n        const answers = this.state.answers.filter(key => key !== k);\n\n        // can use data-binding to set\n        this.setState({\n            answers\n        });\n\n        this.props.changeOrder(answers);\n    };\n\n    /* add an answer */\n    add = () => {\n        // can use data-binding to get\n        const answers = this.state.answers;\n        const nextKeys = answers.concat(randomID());\n        // can use data-binding to set\n        // important! notify form to detect changes\n        this.setState({\n            answers: nextKeys\n        });\n\n        this.props.changeOrder(nextKeys);\n    };\n\n    onDragEnd = (result) => {\n        // a little function to help us with reordering the result\n        const reorder = (list, startIndex, endIndex) => {\n            const result = Array.from(list);\n            const [removed] = result.splice(startIndex, 1);\n            result.splice(endIndex, 0, removed);\n            return result;\n        };\n        // dropped outside the list\n        if (!result.destination) {\n            return;\n        }\n        const answers = reorder(\n            this.state.answers,\n            result.source.index,\n            result.destination.index\n        );\n        this.setState({\n            answers\n        });\n        this.props.changeOrder(answers);\n    };\n\n    render() {\n        const { TextArea } = Input;\n        const Panel = Collapse.Panel;\n        const { getFieldDecorator, getFieldValue } = this.props.form;\n        this.props.form.getFieldDecorator(`responses[${this.props.id}].type.name`, {initialValue: \"multiple\"});\n\n        const formItemLayout = {\n            labelCol: { span: 4 },\n            wrapperCol: { span: 20 },\n        };\n\n        const formItemLayoutWithoutLabel = {\n            wrapperCol: { span: 24 },\n        };\n\n        const buttonItemLayout = {\n            wrapperCol: { span: 14, offset: 4 },\n        };\n        const formItems = this.state.answers.map((k, index) => (\n            <Draggable key={\"drag_\"+k} draggableId={\"drag_\"+k} index={index}>\n                {(provided, snapshot) => (\n                    <div\n                        key={k}\n                        {...provided.draggableProps}\n                        //innerRef={provided.innerRef}\n                        ref={provided.innerRef}\n                    >\n                        <Card\n                            size={\"small\"}\n                            bordered={snapshot.isDragging}\n                            style={{backgroundColor: snapshot.isDragging?\"white\":theme[\"@white\"]}}\n                            {...provided.dragHandleProps}\n                        >\n                            <Form.Item\n                                {...formItemLayout}\n                                label={\"choice \" + index}\n                                required={false}\n                                key={k}\n                            >\n                                {getFieldDecorator(`responses[${this.props.id}].answers[${k}].text`, {\n                                    validateTrigger: ['onChange', 'onBlur'],\n                                    rules: [\n                                        {\n                                            required: true,\n                                            whitespace: true,\n                                            message: \"Cannot have empty body choice.\",\n                                        },\n                                    ],\n                                })(<Input placeholder=\"choice content\" style={{width: '60%', marginRight: 8}}/>)}\n                                <Icon\n                                    className=\"dynamic-delete-button\"\n                                    type=\"minus-circle-o\"\n                                    onClick={() => this.remove(k)}\n                                />\n                            </Form.Item>\n                            <Form.Item\n                                {...formItemLayout}\n                                label=\"Grade\"\n                            >\n                                {getFieldDecorator(`responses[${this.props.id}].answers[${k}].grade`, {\n                                    initialValue: index === 0 ? 100 : 0,\n                                })(<InputNumber\n                                    formatter={value => `${value}%`}\n                                    parser={value => value.replace('%', '')}\n                                />)}\n                            </Form.Item>\n                        </Card>\n                    </div>\n                )}\n            </Draggable>\n        ));\n\n\n        return (\n            <Collapse defaultActiveKey={[this.props.id]} style={{marginBottom: 12}}>\n                <Panel\n                    header={\n                        <span>\n                        <Tag onClick={this.props.up} style={{marginLeft: 4}}>\n                            <Icon type=\"caret-up\" />\n                        </Tag>\n                        <Tag onClick={this.props.down}>\n                            <Icon type=\"caret-down\" />\n                        </Tag>\n                            {this.props.title}\n                    </span>\n                    }\n                    key={this.props.id}\n                    extra={\n                        <Icon type=\"delete\" onClick={this.props.remove}/>\n                    }\n                    forceRender\n                >\n                    <DragDropContext onDragEnd={this.onDragEnd}>\n                        <Form.Item label=\"Text\" {...formItemLayout}>\n                            {getFieldDecorator(`responses[${this.props.id}].text`, {})(\n                            <TextArea autosize={{ minRows: 2, maxRows: 6 }} placeholder=\"description of this response\" />)}\n                        </Form.Item>\n                        <Divider />\n                        <Droppable droppableId={\"drop_\"+this.props.id}>\n                            {(provided) => (\n                                <div\n                                    {...provided.droppableProps}\n                                    //innerRef={provided.innerRef}\n                                    ref={provided.innerRef}\n                                >\n                                    {formItems}\n                                    {provided.placeholder}\n                                </div>\n                            )}\n\n                        </Droppable>\n                        {(formItems.length !== 0) && <Divider/>}\n                        <Button type=\"default\" icon=\"plus\" onClick={this.add}>\n                            Add choice\n                        </Button>\n                        <div style={{float:\"right\"}}>\n                            <Tooltip title=\"Multiple correct answers?\" arrowPointAtCenter>\n                                <Tag>Single</Tag>\n                                {getFieldDecorator(`responses[${this.props.id}].type.single`, {initialValue: true})(\n                                    <Switch defaultChecked/>\n                                )}\n                            </Tooltip>\n                            <Divider type=\"vertical\"/>\n                            <Tooltip title=\"Use a dropdown menu for rendering (useful when having many options)\" arrowPointAtCenter>\n                                <Tag>Dropdown</Tag>\n                                {getFieldDecorator(`responses[${this.props.id}].type.dropdown`, {initialValue: false})(\n                                    <Switch/>\n                                )}\n                            </Tooltip>\n                        </div>\n                        {/* storing meta data*/}\n                        <span hidden={true}>\n                            {getFieldDecorator(`responses[${this.props.id}].type.name`, {initialValue: \"multiple\"})(<input/>)}\n                        </span>\n                    </DragDropContext>\n                </Panel>\n            </Collapse>\n        );\n    }\n}","export default function randomID() {\n    return Math.random().toString(36).substr(2, 9)\n};\n","import React from \"react\";\n\nimport {\n    Form,\n    Input,\n    Icon,\n    Button,\n    Select,\n    Divider,\n    Card,\n    Radio,\n    Checkbox,\n    Col,\n    InputNumber,\n    Row,\n    Tag,\n    Collapse\n} from 'antd';\nimport tags from \"../../mocks/Tags\";\nimport theme from \"../../config/theme\"\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd'\n\n/**\n * Input field form template\n */\nexport default class InputField extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            answers: []\n        }\n    }\n\n    randomID = () => {\n        return Math.random().toString(36).substr(2, 9)\n    };\n\n\n    /* remove an answer */\n    remove = k => {\n        // can use data-binding to get\n        const answers = this.state.answers.filter(key => key !== k);\n\n        // can use data-binding to set\n        this.setState({\n            answers\n        });\n\n        this.props.changeOrder(answers);\n    };\n\n    /* add an answer */\n    add = () => {\n        // can use data-binding to get\n        const answers = this.state.answers;\n        const nextKeys = answers.concat(this.randomID());\n        // can use data-binding to set\n        // important! notify form to detect changes\n        this.setState({\n            answers: nextKeys\n        });\n\n        this.props.changeOrder(nextKeys);\n    };\n\n    onDragEnd = (result) => {\n        // a little function to help us with reordering the result\n        const reorder = (list, startIndex, endIndex) => {\n            const result = Array.from(list);\n            const [removed] = result.splice(startIndex, 1);\n            result.splice(endIndex, 0, removed);\n            return result;\n        };\n        // dropped outside the list\n        if (!result.destination) {\n            return;\n        }\n        const answers = reorder(\n            this.state.answers,\n            result.source.index,\n            result.destination.index\n        );\n        this.setState({\n            answers\n        });\n        this.props.changeOrder(answers);\n    };\n\n    render() {\n        const { TextArea } = Input;\n        const Panel = Collapse.Panel;\n        const { getFieldDecorator, getFieldValue } = this.props.form;\n\n\n        const formItemLayout = {\n            labelCol: { span: 4 },\n            wrapperCol: { span: 20 },\n        };\n\n        const formItemLayoutWithoutLabel = {\n            wrapperCol: { span: 24 },\n        };\n\n        const buttonItemLayout = {\n            wrapperCol: {span: 14, offset: 4},\n        };\n        const formItems = this.state.answers.map((k, index) => (\n            <Draggable key={\"drag_\"+k} draggableId={\"drag_\"+k} index={index}>\n                { (provided, snapshot) => (\n                    <div\n                        key={k}\n                        {...provided.draggableProps}\n                        //innerRef={provided.innerRef}\n                        ref={provided.innerRef}\n                    >\n                        <Card\n                            size={\"small\"}\n                            bordered={snapshot.isDragging}\n                            style={{backgroundColor: snapshot.isDragging?\"white\":theme[\"@white\"]}}\n                            {...provided.dragHandleProps}\n                        >\n                            <Form.Item\n                                {...formItemLayout}\n                                label={\"answers \" + index}\n                                required={false}\n                                key={k}\n                            >\n                                {getFieldDecorator(`responses[${this.props.id}].answers[${k}].text`, {\n                                    validateTrigger: ['onChange', 'onBlur'],\n                                    rules: [\n                                        {\n                                            required: true,\n                                            whitespace: true,\n                                            message: \"Cannot have empty body.\",\n                                        },\n                                    ],\n                                })(<Input\n                                    placeholder=\"enter an answer\"\n                                    style={{width: '60%', marginRight: 8}}\n                                />)}\n                                <Icon\n                                    className=\"dynamic-delete-button\"\n                                    type=\"minus-circle-o\"\n                                    onClick={() => this.remove(k)}\n                                />\n                            </Form.Item>\n                            <Form.Item\n                                {...formItemLayout}\n                                label=\"Grade\"\n                            >\n                                {getFieldDecorator(`responses[${this.props.id}].answers[${k}].grade`, {\n                                    initialValue: index === 0 ? 100 : 0,\n                                })(<InputNumber\n                                    formatter={value => `${value}%`}\n                                    parser={value => value.replace('%', '')}\n                                />)}\n                            </Form.Item>\n                        </Card>\n                    </div>\n                )\n            }\n            </Draggable>\n        ));\n\n\n        return (\n            <Collapse defaultActiveKey={[this.props.id]} style={{marginBottom: 12}}>\n            <Panel\n                header={\n                    <span>\n                        <Tag onClick={this.props.up} style={{marginLeft: 4}}>\n                            <Icon type=\"caret-up\" />\n                        </Tag>\n                        <Tag onClick={this.props.down}>\n                            <Icon type=\"caret-down\" />\n                        </Tag>\n                        {this.props.title}\n                    </span>\n                }\n                key={this.props.id}\n                extra={\n                    <Icon type=\"delete\" onClick={this.props.remove}/>\n                }\n                forceRender\n            >\n                <DragDropContext onDragEnd={this.onDragEnd}>\n                    <Form.Item label=\"Text\" {...formItemLayout}>\n                        {getFieldDecorator(`responses[${this.props.id}].text`, {})(\n                            <TextArea autosize={{ minRows: 2, maxRows: 6 }} placeholder=\"description of this response\" />)}\n                    </Form.Item>\n                    <Divider />\n                    <Droppable droppableId={\"drop_\"+this.props.id}>\n                        {(provided) => (\n                            <div\n                                {...provided.droppableProps}\n                                //innerRef={provided.innerRef}\n                                ref={provided.innerRef}\n                            >\n                                {formItems}\n                                {provided.placeholder}\n                            </div>\n                        )}\n                    </Droppable>\n                    {(formItems.length !== 0) && <Divider/>}\n                    <Button type=\"default\" icon=\"plus\" onClick={this.add}>\n                        Add a potential answer\n                    </Button>\n                    {/* storing meta data*/}\n                    <span hidden={true}>\n                        {getFieldDecorator(`responses[${this.props.id}].type.name`, {initialValue: \"input\"})(<input/>)}\n                    </span>\n                </DragDropContext>\n            </Panel>\n            </Collapse>\n        );\n    }\n}","import React from \"react\";\n\nimport { Button, Modal, Form, Input, Radio } from 'antd';\n\nconst VariableCreateForm = Form.create({ name: 'VariableCreateForm' })(\n    // eslint-disable-next-line\n    class extends React.Component {\n        render() {\n            const { visible, onCancel, onCreate, form } = this.props;\n            const { getFieldDecorator } = form;\n            return (\n                <Modal\n                    visible={visible}\n                    title=\"Create a new variable\"\n                    okText=\"Create\"\n                    onCancel={onCancel}\n                    onOk={onCreate}\n                >\n                    <Form layout=\"vertical\">\n                        <Form.Item label=\"Title\">\n                            {getFieldDecorator('title', {\n                                rules: [{ required: true, message: 'Please input the title of collection!' }],\n                            })(<Input />)}\n                        </Form.Item>\n                        <Form.Item label=\"Description\">\n                            {getFieldDecorator('description')(<Input type=\"textarea\" />)}\n                        </Form.Item>\n                        <Form.Item className=\"collection-create-form_last-form-item\">\n                            {getFieldDecorator('modifier', {\n                                initialValue: 'public',\n                            })(\n                                <Radio.Group>\n                                    <Radio value=\"public\">Public</Radio>\n                                    <Radio value=\"private\">Private</Radio>\n                                </Radio.Group>,\n                            )}\n                        </Form.Item>\n                    </Form>\n                </Modal>\n            );\n        }\n    },\n);\n\nexport default class CreateVariableModal extends React.Component {\n\n    handleCancel = () => {\n        this.props.close();\n    };\n\n    handleCreate = () => {\n        const form = this.formRef.props.form;\n        form.validateFields((err, values) => {\n            if (err) {\n                return;\n            }\n\n            console.log('Received values of form: ', values);\n            form.resetFields();\n            this.props.close();\n        });\n    };\n\n    saveFormRef = formRef => {\n        this.formRef = formRef;\n    };\n\n    render() {\n        return (\n            <VariableCreateForm\n                wrappedComponentRef={this.saveFormRef}\n                visible={this.props.visible}\n                onCancel={this.handleCancel}\n                onCreate={this.handleCreate}\n            />\n        );\n    }\n}","import React from \"react\";\n\nimport {Form, Input, Icon, Button, Select, Divider, Modal, Radio, Card} from 'antd';\nimport tags from \"../../mocks/Tags\";\nimport MultipleChoice from \"../DefaultQuestionTypes/MultipleChoice\";\nimport InputField from \"../DefaultQuestionTypes/InputField\";\nimport theme from \"../../config/theme\";\nimport CreateVariableModal from  \"../Variables/CreateVariableModal\"\n\nlet id = 0;\n\nclass CreateQuestionForm extends React.Component {\n    state = {\n        typeOfComponentToAdd: undefined,\n        showVariableModal: false,\n        responses: []\n    };\n\n    randomID = () => {\n      return Math.random().toString(36).substr(2, 9)\n    };\n\n\n    remove = k => {\n        // can use data-binding to get\n        let responses = this.state.responses;\n        console.log(k, responses);\n        responses = responses.filter(r=>r.key!==k);\n\n        // can use data-binding to set\n        this.setState({\n            responses\n        });\n\n    };\n\n    add = () => {\n        const { form } = this.props;\n        // can use data-binding to get\n        const responses = this.state.responses;\n\n        const nextKeys = responses.concat({\n            key: this.randomID(),\n            type: this.state.typeOfComponentToAdd,\n            answerOrder: []\n        });\n        id++;\n        // can use data-binding to set\n        // important! notify form to detect changes\n\n        this.setState({responses: nextKeys})\n    };\n\n    swap = (i, j) => {\n        const responses = this.state.responses;\n        if (j < 0 || j >= responses.length) {\n            return\n        }\n        [responses[i], responses[j]] = [responses[j], responses[i]];\n        this.setState({responses});\n    };\n\n    changeOrder = (k, newOrder) => {\n        let responses = this.state.responses;\n        responses.forEach((r)=>{\n            if (r.key===k) {\n                r.answerOrder = newOrder\n            }\n        });\n        // can use data-binding to set\n        this.setState({\n            responses\n        });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                values.tags = this.parseTags(values.tags);\n                values.responses = this.sortResponses(values.responses);\n                console.log('Received values of form: ', values);\n                console.log(\"Json\", JSON.stringify(values));\n                this.props.preview(values);\n            }\n        });\n    };\n\n    onSelectComponentChange = e => {\n        this.setState({\n            typeOfComponentToAdd: e,\n        });\n    };\n\n    addComponent = () => {\n        const Option = Select.Option;\n\n        const group = <Select\n            showSearch\n            onChange={this.onSelectComponentChange}\n            style={{ width: 200 }}\n            placeholder=\"Select a template\"\n            optionFilterProp=\"children\"\n            filterOption={(input, option) =>\n                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n        >\n            <Option value=\"input\">Input Field</Option>\n            <Option value=\"multiple\">Multiple Choice</Option>\n            <Option value=\"custom\">Custom Templates</Option>\n        </Select>;\n\n        this.addModal = Modal.confirm({\n            title: 'Add Response',\n            content: group,\n            okText: 'OK',\n            cancelText: 'Cancel',\n            onOk: args => {\n                this.addModal.destroy();\n                this.add();\n            }\n        });\n    };\n\n    parseTags = (tags) => {\n        if (tags) {\n            return tags.map(tag => ({name: tag}));\n        }\n    };\n\n    sortResponses = (responses) => {\n        const index = (key) => (this.state.responses.map(item => item.key).indexOf(key));\n\n        console.log(responses);\n        if (!responses) {\n            return\n        }\n        responses = Object.entries(responses);\n        responses.forEach(item => {\n            if (!item[1].answers) {return}\n            console.log(this.state.responses[index(item[0])].answerOrder);\n            const answerIndex = (answerID) => (this.state.responses[index(item[0])].answerOrder.indexOf(answerID));\n            item[1].answers = Object.entries(item[1].answers);\n            item[1].answers.sort((a,b) => (answerIndex(a[0]) > answerIndex(b[0])) ? 1 : -1);\n            item[1].answers = item[1].answers.map((item)=>(item[1]));\n        });\n\n        responses.sort((a,b) => (index(a[0]) > index(b[0])) ? 1 : -1);\n\n        return responses.map((item)=>(item[1]));\n    };\n\n\n    render() {\n        const { TextArea } = Input;\n        const ButtonGroup = Button.Group;\n        const { getFieldDecorator, getFieldValue, getFieldsValue } = this.props.form;\n\n        const formItemLayout = {\n            labelCol: { span: 4 },\n            wrapperCol: { span: 20 },\n        };\n\n        const formItemLayoutWithoutLabel = {\n            wrapperCol: { span: 24 },\n        };\n\n        const buttonItemLayout = {\n            wrapperCol: { span: 14, offset: 4 },\n        };\n        const pairs = this.state.pairs;\n\n        const formItems = this.state.responses.map((k, index) => {\n            switch (k.type) {\n                case \"input\":\n                    return (\n                        <InputField\n                            up={(event)=>{this.swap(index, index-1); event.stopPropagation();}}\n                            down={(event)=>{this.swap(index, index+1); event.stopPropagation();}}\n                            id={k.key}\n                            key={k.key}\n                            index={index}\n                            form={this.props.form}\n                            title={\"Input Field \"+ index}\n                            remove={()=>{this.remove(k.key)}}\n                            changeOrder={(order)=>{this.changeOrder(k.key, order)}}\n                        />);\n                case \"multiple\":\n                    return (\n                        <MultipleChoice\n                            up={(event)=>{this.swap(index, index-1); event.stopPropagation();}}\n                            down={(event)=>{this.swap(index, index+1); event.stopPropagation();}}\n                            id={k.key}\n                            key={k.key}\n                            index={index}\n                            form={this.props.form}\n                            title={\"Multiple Choice \"+ index}\n                            remove={()=>{this.remove(k.key)}}\n                            changeOrder={(order)=>{this.changeOrder(k.key, order)}}\n                        />);\n                default:\n                    return (<Card\n                        title={\"Custom Template \" + k.key}\n                        type=\"inner\"\n                        size=\"small\"\n                        bodyStyle={{backgroundColor: theme[\"@white\"]}}\n                        extra={\n                            <Icon type=\"delete\" onClick={()=>{this.remove(k.key)}}/>\n                        }>Some custom templates</Card>)\n            }\n        });\n\n        return (\n            <Form>\n                <Form.Item required label=\"Title\" {...formItemLayout}>\n                    {getFieldDecorator('title', {\n                        rules: [{ required: true, message: 'Please enter a title for the question!' }],\n                    })(\n                        <Input placeholder=\"enter a title\" />\n                    )}\n                </Form.Item>\n                <Form.Item label=\"Text\" {...formItemLayout}>\n                    {getFieldDecorator('text', {})(\n                        <TextArea autosize={{ minRows: 2, maxRows: 6 }} placeholder=\"description of the question\" />\n                    )}\n                </Form.Item>\n                <Form.Item label=\"Tags\" {...formItemLayout}>\n                    {getFieldDecorator('tags', {})(\n                        <Select placeholder=\"select tags\" mode=\"tags\" style={{ width: '100%' }} tokenSeparators={[',']}>\n                            {tags}\n                        </Select>\n                    )}\n                </Form.Item>\n                <Divider/>\n                {formItems}\n                <Form.Item {...formItemLayoutWithoutLabel}>\n                    <ButtonGroup style={{width: \"100%\"}}>\n                        <Button style={{width: \"50%\"}} type=\"primary\" icon=\"plus\" onClick={this.addComponent}>New Response</Button>\n                        <Button style={{width: \"50%\"}} type=\"default\" icon=\"number\" onClick={()=>{this.setState({showVariableModal: true})}}>New Variable</Button>\n                    </ButtonGroup>\n                </Form.Item>\n                <Divider/>\n                <Form.Item>\n                    <Button type=\"primary\">Save</Button>\n                    <Button type=\"default\" style={{float: \"right\"}} onClick={this.handleSubmit}>Submit</Button>\n                </Form.Item>\n                <CreateVariableModal visible={this.state.showVariableModal} close={()=>{this.setState({showVariableModal: false})}}/>\n            </Form>\n        );\n    }\n}\n\nexport default Form.create({ name: 'CreateQuestionForm' })(CreateQuestionForm);","import React from \"react\";\nimport {Button, Card, Divider, Input, Tag, message, Select, Radio, Checkbox, Empty} from \"antd\";\nimport questions from \"../../mocks/Questions\";\nimport theme from \"../../config/theme\";\nimport {InlineMath} from \"react-katex\";\n\n\nexport default class BasicFrame extends React.Component {\n\n    state = {\n        marked: false,\n        grade: \"\",\n        highestWeight: 0,\n        answers: {}\n    };\n\n    renderComponents = () => {\n        let id=0;\n        if (this.props.question.responses) {\n            return this.props.question.responses.map(component => {\n                id++;\n                switch (component.type.name) {\n                    case \"input\":\n                        return this.renderInput(component, id);\n                    case \"multiple\":\n                        if (component.type.dropdown) {\n                            return this.renderDropDown(component, id);\n                        }\n                        else {\n                            return this.renderMultiple(component, id);\n                        }\n                }\n            })\n        }\n        else return <Empty/>\n    };\n\n    renderInput = (c, id) => {\n        let renderMark;\n        const mark = this.calculateMark(id, c.answers);\n        renderMark = this.state.marked?<span style={{color: \"red\"}}>{mark}</span>:undefined;\n\n        return (\n            <div key={id} style={{backgroundColor: theme[\"@white\"], marginBottom: \"12px\", padding: \"12px\"}}>\n                <p><strong>{c.text}</strong></p>\n                <Input\n                    addonBefore=\"Answer\"\n                    value={this.state.answers[id]}\n                    disabled={this.state.marked}\n                    addonAfter={renderMark}\n                    onChange={\n                        (e)=> {\n                            let answers = this.state.answers;\n                            answers[id] = e.target.value;\n                            this.setState({answers});\n                        }\n                    }\n                />\n            </div>\n        )\n    };\n\n    renderDropDown = (c, id) => {\n        let renderMark;\n        const mark = this.calculateMark(id, c.answers);\n        renderMark = this.state.marked?<span style={{color: \"red\"}}>{mark}</span>:undefined;\n\n        let dropdown;\n        const Option = Select.Option;\n        dropdown = <Select\n            mode={c.type.single?\"default\":\"multiple\"}\n            style={{width:\"100%\"}}\n            onChange={\n                (e)=> {\n                    let answers = this.state.answers;\n                    answers[id] = e;\n                    this.setState({answers});\n                }\n            }\n            disabled={this.state.marked}\n        >\n            {c.answers && c.answers.map(r=><Option key={r.text} value={r.text}>{r.text}</Option>)}\n        </Select>;\n\n        return (\n            <div key={id} style={{backgroundColor: theme[\"@white\"], marginBottom: \"12px\", padding: \"12px\"}}>\n                <p><strong>{c.text}</strong></p>\n                {dropdown}\n                {renderMark}\n            </div>\n        )\n    };\n\n    renderMultiple = (c, id) => {\n\n        let renderMark;\n        const mark = this.calculateMark(id, c.answers);\n        renderMark = this.state.marked?<span style={{color: \"red\"}}>{mark}</span>:undefined;\n\n        const RadioGroup = Radio.Group;\n        const CheckboxGroup = Checkbox.Group;\n\n        let choices;\n\n        const optionStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px',\n        };\n\n        if (c.type.single) {\n            choices = (\n                <RadioGroup\n                    onChange={\n                        (e) => {\n                            let answers = this.state.answers;\n                            answers[id] = e.target.value;\n                            this.setState({answers});\n                        }\n                    }\n                    value={this.state.answers[id]}\n                    disabled={this.state.marked}\n                >\n                    {c.answers && c.answers.map(r=><Radio key={r.text} value={r.text} style={optionStyle}>{r.text}</Radio>)}\n                </RadioGroup>\n            );\n        }\n        else {\n            choices =\n            <div className=\"verticalCheckBoxGroup\">\n                <CheckboxGroup\n                options={\n                    c.answers && c.answers.map(r=>({label: r.text, value: r.text}))\n                }\n                disabled={this.state.marked}\n                onChange={\n                    (e) => {\n                        let answers = this.state.answers;\n                        answers[id] = e;\n                        this.setState({answers});\n                    }\n                }\n            />\n            </div>\n        }\n\n        return (\n            <div key={id} style={{backgroundColor: theme[\"@white\"], marginBottom: \"12px\", padding: \"12px\"}}>\n                <p><strong>{c.text}</strong></p>\n                {choices}\n                {renderMark}\n            </div>\n        )\n    };\n\n    renderTags = () => {\n        return this.props.question.tags.map(tag => (<Tag color={theme[\"@primary-color\"]}>{tag.name}</Tag>))\n    };\n\n    save = () => {\n        message\n            .loading('Saving..', 2.5)\n            .then(() => message.success('Saved', 2.5))\n            .then(() => message.info('This is only a mock for saving', 2.5));\n    };\n\n    submit = () => {\n        this.setState({marked: !this.state.marked});\n        let grade = 0;\n        Object.keys(this.state.answers).forEach(id=>{\n            if (this.props.question.responses[id-1]) {\n                grade += this.calculateMark(id, this.props.question.responses[id-1].answers);\n            }\n        });\n        this.setState({grade});\n    };\n\n    calculateMark = (id, response) => {\n        let mark = 0;\n        const answer = this.state.answers[id];\n\n        if (!response) {\n            return mark;\n        }\n\n        response.forEach(r=>{\n            if (answer&&Array.isArray(answer)) {\n                answer.forEach(a=>{\n                    if (r.text == a) {\n                        mark += r.grade;\n                    }\n                })\n            }\n            else {\n                if (r.text == answer) {\n                    mark = r.grade;\n                }\n            }\n        });\n        return mark;\n    };\n\n    render() {\n        const { Meta } = Card;\n\n\n        let Sum = 0;\n        if (this.props.question.responses) {\n            this.props.question.responses.forEach(c=> {\n                if (c.answers) {\n                    if (c.type.single!==false  || c.type.name !== \"multiple\") {\n                        Sum += Math.max.apply(Math, c.answers.map(function(o) { return o.grade; }));\n                    }\n                    else {\n                        c.answers.forEach(r => {\n                            if (r.grade > 0) {\n                                Sum += r.grade;\n                            }\n                        })\n                    }\n                }\n            });\n        }\n\n        return (\n            <div>\n                <Card\n                    type={\"inner\"}\n                    title={this.props.question.title}\n                    extra={this.state.grade+\"/\"+Sum}\n                    //bodyStyle={{backgroundColor: theme[\"@white\"]}}\n                >\n                    <Meta\n                        title={this.props.question.text}\n                        //description={this.renderTags()}\n                    />\n                    <Divider style={{marginTop: \"12px\", marginBottom: \"12px\"}}/>\n                    {this.renderComponents()}\n                    <Divider/>\n                    <Button type=\"danger\" icon=\"upload\" onClick={this.submit}>Submit</Button>\n                </Card>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport {Button, Col, Divider, Empty, Form, Icon, Input, Layout, Radio, Row, Select} from \"antd\";\nimport data from \"../../mocks/QuestionBankTable\";\nimport questions from \"../../mocks/Questions\";\nimport tags from \"../../mocks/Tags\"\nimport CreateQuestionForm from \"../../components/Forms/CreateQuestionForm\";\nimport BasicFrame from \"../../components/QuestionPreviews/BasicFrame\";\nimport FractionDisplay from \"../../utils/FractionDisplay\";\n\n\nlet id = 0;\n\nexport default class CreateQuestions extends React.Component {\n\n    state = {\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        /*\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const { keys, names } = values;\n                console.log('Received values of form: ', values);\n                console.log('Merged values:', keys.map(key => names[key]));\n            }\n        });\n        */\n    };\n\n    render() {\n\n        const formItemLayout = {\n            labelCol: { span: 4 },\n            wrapperCol: { span: 20 },\n        };\n\n        const formItemLayoutWithoutLabel = {\n            wrapperCol: { span: 24 },\n        };\n\n        const buttonItemLayout = {\n            wrapperCol: { span: 14, offset: 4 },\n        };\n\n        const colResponsive = {\n            xs: 24,\n            sm: 24,\n            md: 24,\n            lg: 24,\n            xl: 12\n        };\n\n        const divider = {\n            xs: 24,\n            sm: 24,\n            md: 24,\n            lg: 24,\n            xl: 0\n        };\n\n        const { TextArea } = Input;\n\n\n\n        return (\n            <Row gutter={8}>\n                <Col {...colResponsive} >\n                    <div style={{ padding: 24, background: '#fff', minHeight: \"80vh\" }}>\n                        <h1>New Question</h1>\n                        <CreateQuestionForm preview={(question)=>(this.setState({question}))}/>\n                    </div>\n                </Col>\n                <Col {...divider}><div><Divider/></div></Col>\n                <Col {...colResponsive}>\n                    <div style={{ padding: 24, background: '#fff', minHeight: \"80vh\" }}>\n                        <h1>Preview</h1>\n                        {this.state.question && <BasicFrame key={this.state.question.title} question={this.state.question}/>}\n                        {questions.map(question=>(<span key={question.title} style={{margin: 16}}><BasicFrame question={question}/></span>))}\n                        {FractionDisplay()}\n                    </div>\n                </Col>\n            </Row>\n\n        )\n    }\n}","\nimport React from 'react';\nimport { Fraction, toTex, Expression } from 'algebra.js';\nimport { Node, Context } from 'react-mathjax2';\nimport { InlineMath, BlockMath } from 'react-katex';\n\nfunction Formula(props) {\n    return (\n        <Context input=\"tex\">\n            <Node inline>{props.tex}</Node>\n        </Context>\n    );\n}\n\nexport default function FractionDisplay() {\n    const a = new Fraction(1, 5);\n    const b = new Fraction(2, 7);\n    const answer = a.multiply(b);\n\n    //const question = <Formula tex={`${toTex(a)} × ${toTex(b)} = ${toTex(answer)}`} />;\n    const lambda = new Expression(\"lambda\").add(3).divide(4);\n    const Phi = new Expression(\"Phi\").subtract(new Fraction(1, 5)).add(lambda);\n    const question =  <InlineMath>{toTex(Phi)}</InlineMath>;\n\n    return (\n        <div>\n            {question}\n        </div>\n    );\n}","import React from 'react';\nimport {Breadcrumb, Button, Divider, Icon, Layout, Menu, Table, Tag} from \"antd\";\nimport './App.css';\nimport SketchQuestionBank from \"./layouts/SketchQuestionBank\";\nimport QuestionBankTable from \"./pages/QuestionBankTable\"\nimport BasicLayout from \"./layouts/BasicLayout\";\nimport CreateQuestions from \"./pages/CreateQuestions\";\n\nexport default class App extends React.Component{\n    render() {\n        return (\n            <BasicLayout>\n                {/*<QuestionBankTable/>*/}\n                <CreateQuestions/>\n            </BasicLayout>\n        )\n    }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}