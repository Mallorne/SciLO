{"version":3,"sources":["layouts/SideNav/index.js","mocks/QuestionBankTable.js","layouts/SketchQuestionBank.js","pages/QuestionBankTable/index.js","layouts/BasicLayout/index.js","mocks/Questions.js","mocks/Tags.js","components/DefaultQuestionTypes/MultipleChoice.js","components/DefaultQuestionTypes/InputField.js","components/forms/CreateQuestionForm.js","components/QuestionPreviews/BasicFrame.js","pages/CreateQuestions/index.js","App.js","serviceWorker.js","index.js"],"names":["SideNav","Sider","es_layout","react_default","a","createElement","className","breakpoint","collapsible","onBreakpoint","broken","onCollapse","collapsed","type","menu","theme","mode","defaultSelectedKeys","Item","key","icon","React","Component","mocks_QuestionBankTable","title","context","tags","BasicLayout","footer","_this$props","this","props","location","breadcrumbNameList","Header","Footer","Content","layout","SideNav_SideNav","style","marginLeft","breadcrumb","href","getContext","map","item","i","children","Fragment","react_document_title_default","Questions","text","responses","answers","grade","single","dropdown","Option","es_select","tag","Tags_Option","id","MultipleChoice","remove","k","form","_this","keys","getFieldValue","setFieldsValue","filter","add","nextKeys","concat","handleSubmit","e","preventDefault","validateFields","err","values","names","console","log","_this2","TextArea","input","_this$props$form","getFieldDecorator","formItemLayout","labelCol","span","wrapperCol","initialValue","formItems","index","es_form","Object","assign","label","required","validateTrigger","rules","whitespace","message","placeholder","width","marginRight","onClick","col","input_number","defaultValue","formatter","value","parser","replace","card","size","bodyStyle","backgroundColor","extra","autosize","minRows","maxRows","es_divider","es_button","tooltip","es_switch","float","checkedChildren","unCheckedChildren","DefaultQuestionTypes_MultipleChoice","create","name","InputField","DefaultQuestionTypes_InputField","CreateQuestionForm","state","typeOfComponentToAdd","undefined","pairs","setState","onSelectComponentChange","addComponent","group","showSearch","onChange","optionFilterProp","filterOption","option","toLowerCase","indexOf","addModal","modal","confirm","content","okText","cancelText","onOk","args","destroy","getFieldsValue","tokenSeparators","forms_CreateQuestionForm","BasicFrame","marked","highestWeight","renderComponents","question","component","renderInput","renderDropDown","renderMultiple","c","renderMark","mark","calculateMark","color","marginBottom","padding","addonBefore","disabled","addonAfter","target","r","choices","RadioGroup","es_radio","Group","CheckboxGroup","es_checkbox","optionStyle","display","height","lineHeight","options","renderTags","es_tag","save","loading","then","success","info","submit","forEach","response","answer","Array","isArray","Sum","Math","max","apply","o","Meta","ButtonGroup","background","marginTop","CreateQuestions","questions","length","push","colResponsive","xs","sm","md","lg","xl","row","gutter","minHeight","BasicFrame_BasicFrame","empty","App","BasicLayout_BasicLayout","CreateQuestions_CreateQuestions","Boolean","window","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0eAOqBA,2LACR,IACGC,EADHC,EAAA,EACGD,MACR,OACIE,EAAAC,EAAAC,cAACJ,EAAD,CACIK,UAAU,UACVC,WAAW,KAEXC,aAAW,EACXC,aAAc,SAAAC,KAGdC,WAAY,SAACC,EAAWC,MAIxBV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACfH,EAAAC,EAAAC,cAAAS,EAAA,GAAMC,MAAM,OAAOC,KAAK,SAASC,oBAAqB,CAAC,MACnDd,EAAAC,EAAAC,cAAAS,EAAA,EAAMI,KAAN,CAAWC,IAAI,KACXhB,EAAAC,EAAAC,cAAAe,EAAA,GAAMP,KAAK,SACXV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,SAEJH,EAAAC,EAAAC,cAAAS,EAAA,EAAMI,KAAN,CAAWC,IAAI,KACXhB,EAAAC,EAAAC,cAAAe,EAAA,GAAMP,KAAK,aACXV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,kBAEJH,EAAAC,EAAAC,cAAAS,EAAA,EAAMI,KAAN,CAAWC,IAAI,KACXhB,EAAAC,EAAAC,cAAAe,EAAA,GAAMP,KAAK,WACXV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,UAEJH,EAAAC,EAAAC,cAAAS,EAAA,EAAMI,KAAN,CAAWC,IAAI,KACXhB,EAAAC,EAAAC,cAAAe,EAAA,GAAMP,KAAK,SACXV,EAAAC,EAAAC,cAAA,QAAMC,UAAU,YAAhB,kBAhCae,IAAMC,YCJ5BC,EAAA,CACX,CACIJ,IAAK,IACLK,MAAO,sBACPC,QAAS,QACTC,KAAM,CAAC,SAAU,aAErB,CACIP,IAAK,IACLK,MAAO,sBACPC,QAAS,+BACTC,KAAM,CAAC,mBAEX,CACIP,IAAK,IACLK,MAAO,mBACPC,QAAS,2CACTC,KAAM,CAAC,YAAa,QAAS,eAEjC,CACIP,IAAK,MACLK,MAAO,sBACJC,QAAS,QACZC,KAAM,CAAC,OAAQ,aAEnB,CACIP,IAAK,MACLK,MAAO,sBACPC,QAAS,+BACTC,KAAM,CAAC,aAEX,CACIP,IAAK,MACLK,MAAO,mBACPC,QAAS,iCACTC,KAAM,CAAC,OAAQ,QAAS,mBChCgBL,IAAMC,UCEPD,IAAMC,2BCChCK,qNACjBC,OAAS,uGAEI,IAAAC,EAC8BC,KAAKC,MADnCF,EACHG,SADGH,EACOI,mBAIhB,MAHW,QAGJ,CACHD,SAJO,QAKPC,mBAJiB,CAAC,gBAAiB,8CAQlC,IACGC,EADHhC,EAAA,EACGgC,OAAQC,EADXjC,EAAA,EACWiC,OAAQC,EADnBlC,EAAA,EACmBkC,QAElBC,EACFlC,EAAAC,EAAAC,cAAAH,EAAA,GAAQI,UAAU,eACdH,EAAAC,EAAAC,cAACiC,EAAD,MACAnC,EAAAC,EAAAC,cAAAH,EAAA,GAAQqC,MAAO,CAAEC,WAAY,MACzBrC,EAAAC,EAAAC,cAAC6B,EAAD,CAAQ5B,UAAU,UACdH,EAAAC,EAAAC,cAAAoC,EAAA,OACItC,EAAAC,EAAAC,cAAAoC,EAAA,EAAYvB,KAAZ,CAAiBwB,KAAK,IAClBvC,EAAAC,EAAAC,cAAAe,EAAA,GAAMP,KAAK,UAGdiB,KAAKa,aAAaV,mBAAmBW,IAAI,SAAAC,GACtC,IAAIC,EAAE,EACN,OACI3C,EAAAC,EAAAC,cAAAoC,EAAA,EAAYvB,KAAZ,CAAiBC,IAAK2B,KACjBD,OAOrB1C,EAAAC,EAAAC,cAAC+B,EAAD,CAAS9B,UAAU,WACdwB,KAAKC,MAAMgB,UAEhB5C,EAAAC,EAAAC,cAAC8B,EAAD,CAAQ7B,UAAU,UACbwB,KAAKF,UAMtB,OACIzB,EAAAC,EAAAC,cAACF,EAAAC,EAAM4C,SAAP,KACI7C,EAAAC,EAAAC,cAAC4C,EAAA7C,EAAD,CAAeoB,MAAOM,KAAKa,aAAaX,UACnCK,WAnDoBhB,IAAMC,+DCThC4B,EAAA,CACX,CACI1B,MAAO,kBACP2B,KAAM,qDACNzB,KAAM,CACF,OACA,QAEJ0B,UAAW,CACP,CACIvC,KAAM,QACNsC,KAAM,+BACNE,QAAS,CACL,CACIF,KAAM,IACNG,MAAO,KAEX,CACIH,KAAM,MACNG,MAAO,KAEX,CACIH,KAAM,IACNG,MAAO,MAInB,CACIzC,KAAM,QACNsC,KAAM,iCACNE,QAAS,CACL,CACIF,KAAM,IACNG,MAAO,SAM3B,CACI9B,MAAO,kBACP2B,KAAM,8CACNzB,KAAM,CACF,OAEJ0B,UAAW,CACP,CACIvC,KAAM,WACN0C,QAAQ,EACRC,UAAU,EACVL,KAAM,eACNE,QAAS,CACL,CACIF,KAAM,OACNG,MAAO,GAEX,CACIH,KAAM,MACNG,MAAO,KAEX,CACIH,KAAM,MACNG,MAAO,MAInB,CACIzC,KAAM,WACN0C,QAAQ,EACRC,UAAU,EACVL,KAAM,mBACNE,QAAS,CACL,CACIF,KAAM,OACNG,OAAQ,IAEZ,CACIH,KAAM,MACNG,MAAO,IAEX,CACIH,KAAM,MACNG,MAAO,MAInB,CACIzC,KAAM,WACN0C,QAAQ,EACRC,UAAU,EACVL,KAAM,mBACNE,QAAS,CACL,CACIF,KAAM,OACNG,OAAQ,IAEZ,CACIH,KAAM,MACNG,MAAO,IAEX,CACIH,KAAM,MACNG,MAAO,yBChGzBG,EAASC,EAAA,EAAOD,OAWP/B,EATF,CACT,OACA,SACA,OACA,QACA,gBAIgBkB,IAAI,SAAAe,GAAG,OAAIxD,EAAAC,EAAAC,cAACuD,EAAD,CAAQzC,IAAKwC,GAAMA,uHCG9CE,EAAK,EAKHC,6MACFC,OAAS,SAAAC,GAAK,IACFC,EAASC,EAAKnC,MAAdkC,KAEFE,EAAOF,EAAKG,cAAc,QAGhCH,EAAKI,eAAe,CAChBF,KAAMA,EAAKG,OAAO,SAAAnD,GAAG,OAAIA,IAAQ6C,SAIzCO,IAAM,WAAM,IACAN,EAASC,EAAKnC,MAAdkC,KAGFO,EADOP,EAAKG,cAAc,QACVK,OAAOZ,KAG7BI,EAAKI,eAAe,CAChBF,KAAMK,OAIdE,aAAe,SAAAC,GACXA,EAAEC,iBACFV,EAAKnC,MAAMkC,KAAKY,eAAe,SAACC,EAAKC,GACjC,IAAKD,EAAK,KACEX,EAAgBY,EAAhBZ,KAAMa,EAAUD,EAAVC,MACdC,QAAQC,IAAI,4BAA6BH,GACzCE,QAAQC,IAAI,iBAAkBf,EAAKvB,IAAI,SAAAzB,GAAG,OAAI6D,EAAM7D,kFAKvD,IAAAgE,EAAArD,KACGsD,EADHC,EAAA,EACGD,SADHE,EAEwCxD,KAAKC,MAAMkC,KAAhDsB,EAFHD,EAEGC,kBAAmBnB,EAFtBkB,EAEsBlB,cAErBoB,EAAiB,CACnBC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAUxBH,EAAkB,OAAQ,CAAEK,aAAc,KAC1C,IACMC,EADOzB,EAAc,QACJxB,IAAI,SAACoB,EAAG8B,GAAJ,OACvB3F,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4C,SAAA,KACI7C,EAAAC,EAAAC,cAAA0F,EAAA,EAAM7E,KAAN8E,OAAAC,OAAA,GACQT,EADR,CAEIU,MAAO,UAAYlC,EACnBmC,UAAU,EACVhF,IAAK6C,IAEJuB,EAAiB,SAAAd,OAAUT,EAAV,KAAgB,CAC9BoC,gBAAiB,CAAC,WAAY,UAC9BC,MAAO,CACH,CACIF,UAAU,EACVG,YAAY,EACZC,QAAS,oCANpBhB,CASEpF,EAAAC,EAAAC,cAAAgF,EAAA,GAAOmB,YAAY,iBAAiBjE,MAAO,CAAEkE,MAAO,MAAOC,YAAa,MAC3EvG,EAAAC,EAAAC,cAAAe,EAAA,GACId,UAAU,wBACVO,KAAK,iBACL8F,QAAS,kBAAMxB,EAAKpB,OAAOC,MAE/B7D,EAAAC,EAAAC,cAAAuG,EAAA,eAEIzG,EAAAC,EAAAC,cAAAwG,EAAA,GACIC,aAAkB,IAAJ9C,EAAM,IAAI,EACxB+C,UAAW,SAAAC,GAAK,SAAAvC,OAAOuC,EAAP,MAChBC,OAAQ,SAAAD,GAAK,OAAIA,EAAME,QAAQ,IAAK,YAUxD,OACI/G,EAAAC,EAAAC,cAAA0F,EAAA,OACI5F,EAAAC,EAAAC,cAAA8G,EAAA,GACI3F,MAAOM,KAAKC,MAAMP,MAClBX,KAAK,QACLuG,KAAK,QACLC,UAAW,CAACC,gBAAiBvG,EAAM,WACnCwG,MACIpH,EAAAC,EAAAC,cAAAe,EAAA,GAAMP,KAAK,SAAS8F,QAAS7E,KAAKC,MAAMgC,UAGhD5D,EAAAC,EAAAC,cAAA0F,EAAA,EAAM7E,KAAN8E,OAAAC,OAAA,CAAWC,MAAM,QAAWV,GACxBrF,EAAAC,EAAAC,cAAC+E,EAAD,CAAUoC,SAAU,CAAEC,QAAS,EAAGC,QAAS,GAAKlB,YAAY,kCAEhErG,EAAAC,EAAAC,cAAAsH,EAAA,QACC9B,EACD1F,EAAAC,EAAAC,cAAA0F,EAAA,EAAM7E,KA/DqB,CAC/ByE,WAAY,CAAED,KAAM,KA+DZvF,EAAAC,EAAAC,cAAAuH,EAAA,GAAQ/G,KAAK,UAAUO,KAAK,OAAOuF,QAAS7E,KAAKyC,KAAjD,cAGApE,EAAAC,EAAAC,cAAAwH,EAAA,GAASrG,MAAM,uEACfrB,EAAAC,EAAAC,cAAAyH,EAAA,GAAQvF,MAAO,CAACwF,MAAO,SAAUC,gBAAgB,WAAWC,kBAAkB,yBAhHrE5G,IAAMC,WAyHpB4G,EAAAnC,EAAA,EAAKoC,OAAO,CAAEC,KAAM,kBAApB,CAAwCtE,GC5InDD,EAAK,EAKHwE,6MACFtE,OAAS,SAAAC,GAAK,IACFC,EAASC,EAAKnC,MAAdkC,KAEFE,EAAOF,EAAKG,cAAc,QAGhCH,EAAKI,eAAe,CAChBF,KAAMA,EAAKG,OAAO,SAAAnD,GAAG,OAAIA,IAAQ6C,SAIzCO,IAAM,WAAM,IACAN,EAASC,EAAKnC,MAAdkC,KAGFO,EADOP,EAAKG,cAAc,QACVK,OAAOZ,KAG7BI,EAAKI,eAAe,CAChBF,KAAMK,OAIdE,aAAe,SAAAC,GACXA,EAAEC,iBACFV,EAAKnC,MAAMkC,KAAKY,eAAe,SAACC,EAAKC,GACjC,IAAKD,EAAK,KACEX,EAAgBY,EAAhBZ,KAAMa,EAAUD,EAAVC,MACdC,QAAQC,IAAI,4BAA6BH,GACzCE,QAAQC,IAAI,iBAAkBf,EAAKvB,IAAI,SAAAzB,GAAG,OAAI6D,EAAM7D,kFAKvD,IAAAgE,EAAArD,KACGsD,EADHC,EAAA,EACGD,SADHE,EAEwCxD,KAAKC,MAAMkC,KAAhDsB,EAFHD,EAEGC,kBAAmBnB,EAFtBkB,EAEsBlB,cAErBoB,EAAiB,CACnBC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAUxBH,EAAkB,OAAQ,CAAEK,aAAc,KAC1C,IACMC,EADOzB,EAAc,QACJxB,IAAI,SAACoB,EAAG8B,GAAJ,OACvB3F,EAAAC,EAAAC,cAAAF,EAAAC,EAAA4C,SAAA,KACI7C,EAAAC,EAAAC,cAAA0F,EAAA,EAAM7E,KAAN8E,OAAAC,OAAA,GACQT,EADR,CAEIU,MAAO,WAAalC,EACpBmC,UAAU,EACVhF,IAAK6C,IAEJuB,EAAiB,SAAAd,OAAUT,EAAV,KAAgB,CAC9BoC,gBAAiB,CAAC,WAAY,UAC9BC,MAAO,CACH,CACIF,UAAU,EACVG,YAAY,EACZC,QAAS,6BANpBhB,CASEpF,EAAAC,EAAAC,cAAAgF,EAAA,GAAOmB,YAAY,kBAAkBjE,MAAO,CAAEkE,MAAO,MAAOC,YAAa,MAC5EvG,EAAAC,EAAAC,cAAAe,EAAA,GACId,UAAU,wBACVO,KAAK,iBACL8F,QAAS,kBAAMxB,EAAKpB,OAAOC,MAE/B7D,EAAAC,EAAAC,cAAAuG,EAAA,eAEIzG,EAAAC,EAAAC,cAAAwG,EAAA,GACIC,aAAkB,IAAJ9C,EAAM,IAAI,EACxB+C,UAAW,SAAAC,GAAK,SAAAvC,OAAOuC,EAAP,MAChBC,OAAQ,SAAAD,GAAK,OAAIA,EAAME,QAAQ,IAAK,YAUxD,OACI/G,EAAAC,EAAAC,cAAA0F,EAAA,OACI5F,EAAAC,EAAAC,cAAA8G,EAAA,GACI3F,MAAOM,KAAKC,MAAMP,MAClBX,KAAK,QACLuG,KAAK,QACLC,UAAW,CAACC,gBAAiBvG,EAAM,WACnCwG,MACIpH,EAAAC,EAAAC,cAAAe,EAAA,GAAMP,KAAK,SAAS8F,QAAS7E,KAAKC,MAAMgC,UAGhD5D,EAAAC,EAAAC,cAAA0F,EAAA,EAAM7E,KAAN8E,OAAAC,OAAA,CAAWC,MAAM,QAAWV,GACxBrF,EAAAC,EAAAC,cAAC+E,EAAD,CAAUoC,SAAU,CAAEC,QAAS,EAAGC,QAAS,GAAKlB,YAAY,kCAEhErG,EAAAC,EAAAC,cAAAsH,EAAA,QACC9B,EACD1F,EAAAC,EAAAC,cAAA0F,EAAA,EAAM7E,KA/DqB,CAC/ByE,WAAY,CAAED,KAAM,KA+DZvF,EAAAC,EAAAC,cAAAuH,EAAA,GAAQ/G,KAAK,UAAUO,KAAK,OAAOuF,QAAS7E,KAAKyC,KAAjD,oCA5GKlD,IAAMC,WAsHhBgH,EAAAvC,EAAA,EAAKoC,OAAO,CAAEC,KAAM,cAApB,CAAoCC,GCzH/CxE,EAAK,EAEH0E,6MACFC,MAAQ,CACJC,0BAAsBC,EACtBC,MAAO,MAIX5E,OAAS,SAAAC,GAAK,IACFC,EAASC,EAAKnC,MAAdkC,KAEFE,EAAOF,EAAKG,cAAc,QAGhCH,EAAKI,eAAe,CAChBF,KAAMA,EAAKG,OAAO,SAAAnD,GAAG,OAAIA,IAAQ6C,SAIzCO,IAAM,WAAM,IACAN,EAASC,EAAKnC,MAAdkC,KAEFE,EAAOF,EAAKG,cAAc,QAC1BuE,EAAQzE,EAAKsE,MAAMG,MACzBA,EAAM9E,GAAMK,EAAKsE,MAAMC,qBACvB,IAAMjE,EAAWL,EAAKM,OAAOZ,GAC7BA,IAGAI,EAAKI,eAAe,CAChBF,KAAMK,IAGVN,EAAK0E,SAAS,CAACD,aAGnBjE,aAAe,SAAAC,GACXA,EAAEC,iBACFV,EAAKnC,MAAMkC,KAAKY,eAAe,SAACC,EAAKC,GACjC,IAAKD,EAAK,KACEX,EAAgBY,EAAhBZ,KAAMa,EAAUD,EAAVC,MACdC,QAAQC,IAAI,4BAA6BH,GACzCE,QAAQC,IAAI,iBAAkBf,EAAKvB,IAAI,SAAAzB,GAAG,OAAI6D,EAAM7D,YAKhE0H,wBAA0B,SAAAlE,GACtBM,QAAQC,IAAI,gBAAiBP,GAC7BT,EAAK0E,SAAS,CACVH,qBAAsB9D,OAI9BmE,aAAe,WACX,IAAMrF,EAASC,EAAA,EAAOD,OAEhBsF,EAAQ5I,EAAAC,EAAAC,cAAAqD,EAAA,GACVsF,YAAU,EACVC,SAAU/E,EAAK2E,wBACftG,MAAO,CAAEkE,MAAO,KAChBD,YAAY,oBACZ0C,iBAAiB,WACjBC,aAAc,SAAC9D,EAAO+D,GAAR,OACVA,EAAOrH,MAAMgB,SAASsG,cAAcC,QAAQjE,EAAMgE,gBAAkB,IAGxElJ,EAAAC,EAAAC,cAACoD,EAAD,CAAQuD,MAAM,SAAd,eACA7G,EAAAC,EAAAC,cAACoD,EAAD,CAAQuD,MAAM,YAAd,mBACA7G,EAAAC,EAAAC,cAACoD,EAAD,CAAQuD,MAAM,UAAd,qBAGJ9C,EAAKqF,SAAWC,EAAA,EAAMC,QAAQ,CAC1BjI,MAAO,eACPkI,QAASX,EACTY,OAAQ,KACRC,WAAY,SACZC,KAAM,SAAAC,GACF5F,EAAKqF,SAASQ,UACd7F,EAAKK,kFAMR,IAAAY,EAAArD,KACGsD,EADHC,EAAA,EACGD,SADHE,EAEwDxD,KAAKC,MAAMkC,KAAhEsB,EAFHD,EAEGC,kBAAmBnB,EAFtBkB,EAEsBlB,cAErBoB,GAJDF,EAEqC0E,eAEnB,CACnBvE,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,MAUxBH,EAAkB,OAAQ,CAAEK,aAAc,KAC1C,IAAMzB,EAAOC,EAAc,QACrBuE,EAAQ7G,KAAK0G,MAAMG,MAEnB9C,EAAY1B,EAAKvB,IAAI,SAACoB,EAAG8B,GAC3B,OAAQ6C,EAAM3E,IACV,IAAK,QACD,OAAQ7D,EAAAC,EAAAC,cAACiI,EAAD,CAAY9G,MAAO,eAAgBwC,EAAGD,OAAQ,WAAKoB,EAAKpB,OAAOC,MAC3E,IAAK,WACD,OAAQ7D,EAAAC,EAAAC,cAAC6H,EAAD,CAAgB1G,MAAO,mBAAmBwC,EAAGD,OAAQ,WAAKoB,EAAKpB,OAAOC,MAClF,QACI,OAAQ7D,EAAAC,EAAAC,cAAA8G,EAAA,GACJ3F,MAAO,mBAAqBwC,EAC5BnD,KAAK,QACLuG,KAAK,QACLC,UAAW,CAACC,gBAAiBvG,EAAM,WACnCwG,MACIpH,EAAAC,EAAAC,cAAAe,EAAA,GAAMP,KAAK,SAAS8F,QAAS,WAAKxB,EAAKpB,OAAOC,OAN9C,4BAWpB,OACI7D,EAAAC,EAAAC,cAAA0F,EAAA,OACI5F,EAAAC,EAAAC,cAAA0F,EAAA,EAAM7E,KAAN8E,OAAAC,OAAA,CAAWE,UAAQ,EAACD,MAAM,SAAYV,GAClCrF,EAAAC,EAAAC,cAAAgF,EAAA,GAAOmB,YAAY,mBAEvBrG,EAAAC,EAAAC,cAAA0F,EAAA,EAAM7E,KAAN8E,OAAAC,OAAA,CAAWC,MAAM,QAAWV,GACxBrF,EAAAC,EAAAC,cAAC+E,EAAD,CAAUoC,SAAU,CAAEC,QAAS,EAAGC,QAAS,GAAKlB,YAAY,iCAEhErG,EAAAC,EAAAC,cAAA0F,EAAA,EAAM7E,KAAN8E,OAAAC,OAAA,CAAWC,MAAM,QAAWV,GACxBrF,EAAAC,EAAAC,cAAAqD,EAAA,GAAQ1C,KAAK,OAAOuB,MAAO,CAAEkE,MAAO,QAAUwD,gBAAiB,CAAC,MAC3DvI,IAGTvB,EAAAC,EAAAC,cAAAsH,EAAA,QACC9B,EACD1F,EAAAC,EAAAC,cAAA0F,EAAA,EAAM7E,KA5CqB,CAC/ByE,WAAY,CAAED,KAAM,KA4CZvF,EAAAC,EAAAC,cAAAuH,EAAA,GAAQ/G,KAAK,SAAS8F,QAAS7E,KAAKgH,aAAcvG,MAAO,CAAEkE,MAAO,SAC9DtG,EAAAC,EAAAC,cAAAe,EAAA,GAAMP,KAAK,SADf,sBAIJV,EAAAC,EAAAC,cAAAsH,EAAA,QACAxH,EAAAC,EAAAC,cAAA0F,EAAA,EAAM7E,KAAN,KACIf,EAAAC,EAAAC,cAAAuH,EAAA,GAAQ/G,KAAK,WAAb,QACAV,EAAAC,EAAAC,cAAAuH,EAAA,GAAQ/G,KAAK,UAAU0B,MAAO,CAACwF,MAAO,SAAUpB,QAAS7E,KAAK4C,cAA9D,mBAjJarD,IAAMC,WAwJxB4I,EAAAnE,EAAA,EAAKoC,OAAO,CAAEC,KAAM,sBAApB,CAA4CG,wDC7JtC4B,8MAEjB3B,MAAQ,CACJ4B,QAAQ,EACR9G,MAAO,GACP+G,cAAe,EACfhH,QAAS,MAqBbiH,iBAAmB,WACf,IAAIzG,EAAG,EACP,OAAOK,EAAKnC,MAAMwI,SAASnH,UAAUR,IAAI,SAAA4H,GAErC,OADA3G,IACQ2G,EAAU3J,MACd,IAAK,QACD,OAAOqD,EAAKuG,YAAYD,EAAW3G,GACvC,IAAK,WACD,OAAI2G,EAAUhH,SACHU,EAAKwG,eAAeF,EAAW3G,GAG/BK,EAAKyG,eAAeH,EAAW3G,SAM1D4G,YAAc,SAACG,EAAG/G,GACd,IAAIgH,EACEC,EAAO5G,EAAK6G,cAAclH,EAAI+G,EAAEvH,SAGtC,OAFAwH,EAAa3G,EAAKsE,MAAM4B,OAAOjK,EAAAC,EAAAC,cAAA,QAAMkC,MAAO,CAACyI,MAAO,QAASF,QAAapC,EAGtEvI,EAAAC,EAAAC,cAAA,OAAKkC,MAAO,CAAC+E,gBAAiBvG,EAAM,UAAWkK,aAAc,OAAQC,QAAS,SAC1E/K,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,cAASuK,EAAEzH,OACdhD,EAAAC,EAAAC,cAAAgF,EAAA,GACI8F,YAAY,SACZnE,MAAO9C,EAAKsE,MAAMnF,QAAQQ,GAC1BuH,SAAUlH,EAAKsE,MAAM4B,OACrBiB,WAAYR,EACZ5B,SACI,SAACtE,GACG,IAAItB,EAAUa,EAAKsE,MAAMnF,QACzBA,EAAQQ,GAAMc,EAAE2G,OAAOtE,MACvB9C,EAAK0E,SAAS,CAACvF,mBAQvCqH,eAAiB,SAACE,EAAG/G,GACjB,IAAIgH,EAIArH,EAHEsH,EAAO5G,EAAK6G,cAAclH,EAAI+G,EAAEvH,SACtCwH,EAAa3G,EAAKsE,MAAM4B,OAAOjK,EAAAC,EAAAC,cAAA,QAAMkC,MAAO,CAACyI,MAAO,QAASF,QAAapC,EAG1E,IAAMjF,EAASC,EAAA,EAAOD,OAgBtB,OAfAD,EAAWrD,EAAAC,EAAAC,cAAAqD,EAAA,GACP1C,KAAM4J,EAAErH,OAAO,UAAU,WACzBhB,MAAO,CAACkE,MAAM,QACdwC,SACI,SAACtE,GACG,IAAItB,EAAUa,EAAKsE,MAAMnF,QACzBA,EAAQQ,GAAMc,EACdT,EAAK0E,SAAS,CAACvF,aAGvB+H,SAAUlH,EAAKsE,MAAM4B,QAEpBQ,EAAEvH,QAAQT,IAAI,SAAA2I,GAAC,OAAEpL,EAAAC,EAAAC,cAACoD,EAAD,CAAQuD,MAAOuE,EAAEpI,MAAOoI,EAAEpI,SAI5ChD,EAAAC,EAAAC,cAAA,OAAKkC,MAAO,CAAC+E,gBAAiBvG,EAAM,UAAWkK,aAAc,OAAQC,QAAS,SAC1E/K,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,cAASuK,EAAEzH,OACbK,EACAqH,MAKbF,eAAiB,SAACC,EAAG/G,GAEjB,IAAIgH,EACEC,EAAO5G,EAAK6G,cAAclH,EAAI+G,EAAEvH,SACtCwH,EAAa3G,EAAKsE,MAAM4B,OAAOjK,EAAAC,EAAAC,cAAA,QAAMkC,MAAO,CAACyI,MAAO,QAASF,QAAapC,EAE1E,IAGI8C,EAHEC,EAAaC,GAAA,EAAMC,MACnBC,EAAgBC,EAAA,EAASF,MAIzBG,EAAc,CAChBC,QAAS,QACTC,OAAQ,OACRC,WAAY,QAoChB,OAhCIT,EADAZ,EAAErH,OAEEpD,EAAAC,EAAAC,cAACoL,EAAD,CACIxC,SACI,SAACtE,GACG,IAAItB,EAAUa,EAAKsE,MAAMnF,QACzBA,EAAQQ,GAAMc,EAAE2G,OAAOtE,MACvB9C,EAAK0E,SAAS,CAACvF,aAGvB2D,MAAO9C,EAAKsE,MAAMnF,QAAQQ,GAC1BuH,SAAUlH,EAAKsE,MAAM4B,QAEpBQ,EAAEvH,QAAQT,IAAI,SAAA2I,GAAC,OAAEpL,EAAAC,EAAAC,cAAAqL,GAAA,GAAO1E,MAAOuE,EAAEpI,KAAMZ,MAAOuJ,GAAcP,EAAEpI,SAK7DhD,EAAAC,EAAAC,cAACuL,EAAD,CACNM,QACItB,EAAEvH,QAAQT,IAAI,SAAA2I,GAAC,MAAG,CAACrF,MAAOqF,EAAEpI,KAAM6D,MAAOuE,EAAEpI,QAE/CiI,SAAUlH,EAAKsE,MAAM4B,OACrBnB,SACI,SAACtE,GACG,IAAItB,EAAUa,EAAKsE,MAAMnF,QACzBA,EAAQQ,GAAMc,EACdT,EAAK0E,SAAS,CAACvF,eAO3BlD,EAAAC,EAAAC,cAAA,OAAKkC,MAAO,CAAC+E,gBAAiBvG,EAAM,UAAWkK,aAAc,OAAQC,QAAS,SAC1E/K,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,cAASuK,EAAEzH,OACbqI,EACAX,MAKbsB,WAAa,WACT,OAAOjI,EAAKnC,MAAMwI,SAAS7I,KAAKkB,IAAI,SAAAe,GAAG,OAAKxD,EAAAC,EAAAC,cAAA+L,EAAA,GAAKpB,MAAOjK,EAAM,mBAAoB4C,QAGtF0I,KAAO,WACH9F,EAAA,EACK+F,QAAQ,WAAY,KACpBC,KAAK,kBAAMhG,EAAA,EAAQiG,QAAQ,QAAS,OACpCD,KAAK,kBAAMhG,EAAA,EAAQkG,KAAK,iCAAkC,UAGnEC,OAAS,WACLxI,EAAK0E,SAAS,CAACwB,QAASlG,EAAKsE,MAAM4B,SACnC,IAAI9G,EAAQ,EACZ0C,OAAO7B,KAAKD,EAAKsE,MAAMnF,SAASsJ,QAAQ,SAAA9I,GACpCP,GAASY,EAAK6G,cAAclH,EAAIK,EAAKnC,MAAMwI,SAASnH,UAAUS,EAAG,GAAGR,WAExEa,EAAK0E,SAAS,CAACtF,aAGnByH,cAAgB,SAAClH,EAAI+I,GACjB,IAAI9B,EAAO,EACL+B,EAAS3I,EAAKsE,MAAMnF,QAAQQ,GAiBlC,OAhBAoB,QAAQC,IAAI2H,EAAQD,GAEpBA,EAASD,QAAQ,SAAApB,GACTsB,GAAQC,MAAMC,QAAQF,GACtBA,EAAOF,QAAQ,SAAAvM,GACPmL,EAAEpI,MAAQ/C,IACV0K,GAAQS,EAAEjI,SAKdiI,EAAEpI,MAAQ0J,IACV/B,EAAOS,EAAEjI,SAIdwH,sFA7LP,IAAIkC,EAAM,EACVlL,KAAKC,MAAMwI,SAASnH,UAAUuJ,QAAQ,SAAA/B,IACnB,IAAXA,EAAErH,OACFyJ,GAAOC,KAAKC,IAAIC,MAAMF,KAAMrC,EAAEvH,QAAQT,IAAI,SAASwK,GAAK,OAAOA,EAAE9J,SAGjEsH,EAAEvH,QAAQsJ,QAAQ,SAAApB,GACVA,EAAEjI,MAAQ,IACV0J,GAAOzB,EAAEjI,WAMzBxB,KAAK8G,SAAS,CAACyB,cAAe2C,qCAkLzB,IACGK,EADHlG,EAAA,EACGkG,KACFC,EAAc1F,EAAA,EAAO+D,MAE3B,OACIxL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA8G,EAAA,GACItG,KAAM,QACNW,MAAOM,KAAKC,MAAMwI,SAAS/I,MAC3B+F,MAAOzF,KAAK0G,MAAMlF,MAAM,IAAIxB,KAAK0G,MAAM6B,eAGvClK,EAAAC,EAAAC,cAACgN,EAAD,CACI7L,MAAOM,KAAKC,MAAMwI,SAASgD,aAG/BpN,EAAAC,EAAAC,cAAAsH,EAAA,GAASpF,MAAO,CAACiL,UAAW,OAAQvC,aAAc,UACjDnJ,KAAKwI,mBACNnK,EAAAC,EAAAC,cAAAsH,EAAA,QACAxH,EAAAC,EAAAC,cAACiN,EAAD,KACInN,EAAAC,EAAAC,cAAAuH,EAAA,GAAQ/G,KAAK,UAAUO,KAAK,OAAOuF,QAAS7E,KAAKuK,MAAjD,QACAlM,EAAAC,EAAAC,cAAAuH,EAAA,GAAQ/G,KAAK,SAASO,KAAK,SAASuF,QAAS7E,KAAK4K,QAAlD,oBA/NgBrL,IAAMC,WCI1CuC,GAAK,EAEY4J,8MAEjBjF,MAAQ,CACJkF,UAAW,MAGf3J,OAAS,SAAAC,GAAK,IACFC,EAASC,EAAKnC,MAAdkC,KAEFE,EAAOF,EAAKG,cAAc,QAEZ,IAAhBD,EAAKwJ,QAKT1J,EAAKI,eAAe,CAChBF,KAAMA,EAAKG,OAAO,SAAAnD,GAAG,OAAIA,IAAQ6C,SAIzCO,IAAM,WACF,IAAImJ,EAAYxJ,EAAKsE,MAAMkF,UAC3BA,EAAUE,KACNzN,EAAAC,EAAAC,cAAA,OAAKwD,GAAIA,IACL1D,EAAAC,EAAAC,cAAA,4BAAoBwD,IACpB1D,EAAAC,EAAAC,cAAAgF,EAAA,GAAO9C,MAAO,CAACkE,MAAO,MAAOsB,MAAO,aAG5ClE,IAAU,EACVK,EAAK0E,SAAS8E,MAGlBhJ,aAAe,SAAAC,GACXA,EAAEC,0FAcF,IAaMiJ,EAAgB,CAClBC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,IApBH7I,EAAA,EA+BGD,SAIR,OACIjF,EAAAC,EAAAC,cAAA8N,EAAA,GAAKC,OAAQ,GACTjO,EAAAC,EAAAC,cAAAuG,EAAA,EAASiH,EACL1N,EAAAC,EAAAC,cAAA,OAAKkC,MAAO,CAAE2I,QAAS,GAAIqC,WAAY,OAAQc,UAAW,SACtDlO,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAC6J,EAAD,QAGR/J,EAAAC,EAAAC,cAAAuG,EAAA,EApBQ,CACZkH,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GACJC,GAAI,GAekB/N,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAAsH,EAAA,UACvBxH,EAAAC,EAAAC,cAAAuG,EAAA,EAASiH,EACL1N,EAAAC,EAAAC,cAAA,OAAKkC,MAAO,CAAE2I,QAAS,GAAIqC,WAAY,OAAQc,UAAW,SACtDlO,EAAAC,EAAAC,cAAA,qBACCqN,EAAU9K,IAAI,SAAA2H,GAAQ,OAAGpK,EAAAC,EAAAC,cAACiO,GAAD,CAAY/D,SAAUA,MAC/CmD,EAAUC,YACPjF,EACCvI,EAAAC,EAAAC,cAAAkO,EAAA,kBAhGgBlN,IAAMC,WCH9BkN,oLAEb,OACIrO,EAAAC,EAAAC,cAACoO,EAAD,KAEItO,EAAAC,EAAAC,cAACqO,GAAD,cALiBrN,IAAMC,WCInBqN,QACW,cAA7BC,OAAO5M,SAAS6M,UAEe,UAA7BD,OAAO5M,SAAS6M,UAEhBD,OAAO5M,SAAS6M,SAASC,MACvB,2DCZNC,IAASC,OAAO7O,EAAAC,EAAAC,cAAC4O,GAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC","file":"static/js/main.a081da7d.chunk.js","sourcesContent":["import React from \"react\";\nimport {Icon, Menu, Layout} from \"antd\";\nimport \"./index.css\"\n\n/**\n * SideNav is the responsive collapsible side navigation bar on the left\n */\nexport default class SideNav extends React.Component {\n    render() {\n        const { Sider } = Layout;\n        return (\n            <Sider\n                className=\"SideNav\"\n                breakpoint=\"lg\"\n                //collapsedWidth=\"0\"\n                collapsible\n                onBreakpoint={broken => {\n                    //console.log(broken);\n                }}\n                onCollapse={(collapsed, type) => {\n                    //console.log(collapsed, type);\n                }}\n            >\n                <div className=\"logo\" />\n                <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['4']}>\n                    <Menu.Item key=\"1\">\n                        <Icon type=\"user\" />\n                        <span className=\"nav-text\">Quiz</span>\n                    </Menu.Item>\n                    <Menu.Item key=\"2\">\n                        <Icon type=\"database\" />\n                        <span className=\"nav-text\">Question Bank</span>\n                    </Menu.Item>\n                    <Menu.Item key=\"3\">\n                        <Icon type=\"upload\" />\n                        <span className=\"nav-text\">nav 3</span>\n                    </Menu.Item>\n                    <Menu.Item key=\"4\">\n                        <Icon type=\"user\" />\n                        <span className=\"nav-text\">User</span>\n                    </Menu.Item>\n                </Menu>\n            </Sider>\n        );\n    }\n}","/**\n * Mock data of questions in the question bank table\n */\nexport default [\n    {\n        key: '1',\n        title: 'basic calculation 1',\n        context: \"1+2=?\",\n        tags: ['simple', 'addition'],\n    },\n    {\n        key: '2',\n        title: 'basic calculation 2',\n        context: \"what is the result of 3 * 5?\",\n        tags: ['multiplication'],\n    },\n    {\n        key: '3',\n        title: 'bonus question 1',\n        context: \"what is the derivative of x^4+x^2+1/x+5?\",\n        tags: ['difficult', 'bonus', 'derivative'],\n    },\n    {\n        key: '1-1',\n        title: 'basic calculation 3',\n           context: \"5+2=?\",\n        tags: ['easy', 'addition'],\n    },\n    {\n        key: '2-2',\n        title: 'basic calculation 4',\n        context: \"what is the result of 7 / 5?\",\n        tags: ['division'],\n    },\n    {\n        key: '3-3',\n        title: 'bonus question 2',\n        context: \"what is the derivative of x^5?\",\n        tags: ['easy', 'bonus', 'derivative'],\n    },\n]","import React from \"react\";\nimport Highlighter from 'react-highlight-words';\nimport {Button, Divider, Icon, Layout, Table, Tag, Breadcrumb, Menu, Input} from \"antd\";\nimport SideNav from \"./SideNav\";\nimport data from \"../mocks/QuestionBankTable.js\";\n\nexport default class SketchQuestionBank extends React.Component {\n    state = {\n        searchText: '',\n        selectedRowKeys: [],\n\n    };\n\n    onSelectChange = selectedRowKeys => {\n        console.log('selectedRowKeys changed: ', selectedRowKeys);\n        this.setState({ selectedRowKeys });\n    };\n\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm)}\n                    icon=\"search\"\n                    size=\"small\"\n                    style={{ width: 90, marginRight: 8 }}\n                >\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => (\n            <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n        ),\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text => (\n            <Highlighter\n                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                searchWords={[this.state.searchText]}\n                autoEscape\n                textToHighlight={text.toString()}\n            />\n        ),\n    });\n\n    handleSearch = (selectedKeys, confirm) => {\n        confirm();\n        this.setState({ searchText: selectedKeys[0] });\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({ searchText: '' });\n    };\n\n\n    render() {\n        const { Header, Footer, Content } = Layout;\n\n\n        let filteredInfo = this.state.filteredValue;\n        const selectedRowKeys = this.state.selectedRowKeys;\n        const rowSelection = {\n            selectedRowKeys,\n            onChange: this.onSelectChange,\n        };\n        const hasSelected = selectedRowKeys.length > 0;\n\n        filteredInfo = filteredInfo || {};\n        const columns = [\n            {\n                title: 'Title',\n                dataIndex: 'title',\n                key: 'title',\n                render: text => <a href=\"javascript:;\">{text}</a>,\n                ...this.getColumnSearchProps('title')\n            },\n            {\n                title: 'Context',\n                dataIndex: 'context',\n                key: 'context',\n                ...this.getColumnSearchProps('context')\n            },\n            {\n                title: 'Tags',\n                key: 'tags',\n                dataIndex: 'tags',\n                render: tags => (\n                    <span>\n        {tags.map(tag => {\n            let color = tag.length > 5 ? 'geekblue' : 'green';\n            if (tag === 'difficult') {\n                color = 'volcano';\n            }\n            return (\n                <Tag color={color} key={tag}>\n                    {tag.toUpperCase()}\n                </Tag>\n            );\n        })}\n      </span>\n                ),\n                filters: [{ text: 'easy', value: 'easy' }, { text: 'bonus', value: 'bonus' }],\n                filteredValue: filteredInfo.name || null,\n            },\n            {\n                title: 'Action',\n                key: 'action',\n                render: (text, record) => (\n                    <span>\n        <a href=\"javascript:;\">Edit {record.name}</a>\n        <Divider type=\"vertical\" />\n        <a href=\"javascript:;\">Delete</a>\n      </span>\n                ),\n            },\n        ];\n\n        return (\n            <Layout style={{minHeight: '100vh'}}>\n                <SideNav/>\n                <Layout>\n                    <Header style={{ background: '#fff', padding: '24px 24px 24px' }} >\n                        <Breadcrumb>\n                            <Breadcrumb.Item href=\"\">\n                                <Icon type=\"home\" />\n                            </Breadcrumb.Item>\n                            <Breadcrumb.Item href=\"\">\n                                <Icon type=\"database\" />\n                                <span>Question Bank</span>\n                            </Breadcrumb.Item>\n                            <Breadcrumb.Item>Math 101</Breadcrumb.Item>\n                        </Breadcrumb>\n                    </Header>\n                    <Content style={{ margin: '24px 16px 0' }}>\n                        <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                            <Table size=\"middle\" rowSelection={rowSelection} columns={columns} dataSource={data} />\n                            <Button icon=\"plus\" type=\"primary\">New</Button>\n                            <Button icon=\"file\" type=\"success\" disabled={!hasSelected} style={{margin: \"0 0 0 16px\"}}>Generate Quiz</Button>\n                        </div>\n\n                    </Content>\n                    <Footer style={{ textAlign: 'center' }}>Concept Sketch</Footer>\n                </Layout>\n            </Layout>\n        )\n    }\n}","import React from \"react\";\nimport Highlighter from 'react-highlight-words';\nimport {Button, Divider, Icon, Layout, Table, Tag, Breadcrumb, Menu, Input} from \"antd\";\nimport data from \"../../mocks/QuestionBankTable.js\";\n\n/**\n * Question table for the question bank section\n */\nexport default class QuestionBankTable extends React.Component {\n    state = {\n        searchText: '',\n        selectedRowKeys: [],\n\n    };\n\n    onSelectChange = selectedRowKeys => {\n        // console.log('selectedRowKeys changed: ', selectedRowKeys);\n        this.setState({ selectedRowKeys });\n    };\n\n    getColumnSearchProps = dataIndex => ({\n        filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\n            <div style={{ padding: 8 }}>\n                <Input\n                    ref={node => {\n                        this.searchInput = node;\n                    }}\n                    placeholder={`Search ${dataIndex}`}\n                    value={selectedKeys[0]}\n                    onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\n                    onPressEnter={() => this.handleSearch(selectedKeys, confirm)}\n                    style={{ width: 188, marginBottom: 8, display: 'block' }}\n                />\n                <Button\n                    type=\"primary\"\n                    onClick={() => this.handleSearch(selectedKeys, confirm)}\n                    icon=\"search\"\n                    size=\"small\"\n                    style={{ width: 90, marginRight: 8 }}\n                >\n                    Search\n                </Button>\n                <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\n                    Reset\n                </Button>\n            </div>\n        ),\n        filterIcon: filtered => (\n            <Icon type=\"search\" style={{ color: filtered ? '#1890ff' : undefined }} />\n        ),\n        onFilter: (value, record) =>\n            record[dataIndex]\n                .toString()\n                .toLowerCase()\n                .includes(value.toLowerCase()),\n        onFilterDropdownVisibleChange: visible => {\n            if (visible) {\n                setTimeout(() => this.searchInput.select());\n            }\n        },\n        render: text => (\n            <Highlighter\n                highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\n                searchWords={[this.state.searchText]}\n                autoEscape\n                textToHighlight={text.toString()}\n            />\n        ),\n    });\n\n    handleSearch = (selectedKeys, confirm) => {\n        confirm();\n        this.setState({ searchText: selectedKeys[0] });\n    };\n\n    handleReset = clearFilters => {\n        clearFilters();\n        this.setState({ searchText: '' });\n    };\n\n\n    render() {\n        let filteredInfo = this.state.filteredValue;\n        const selectedRowKeys = this.state.selectedRowKeys;\n        const rowSelection = {\n            selectedRowKeys,\n            onChange: this.onSelectChange,\n        };\n        const hasSelected = selectedRowKeys.length > 0;\n\n        filteredInfo = filteredInfo || {};\n        const columns = [\n            {\n                title: 'Title',\n                dataIndex: 'title',\n                key: 'title',\n                render: text => <a href=\"javascript:;\">{text}</a>,\n                ...this.getColumnSearchProps('title')\n            },\n            {\n                title: 'Context',\n                dataIndex: 'context',\n                key: 'context',\n                ...this.getColumnSearchProps('context')\n            },\n            {\n                title: 'Tags',\n                key: 'tags',\n                dataIndex: 'tags',\n                render: tags => (\n                    <span>\n                        {tags.map(tag => {\n                            let color = tag.length > 5 ? 'geekblue' : 'green';\n                            if (tag === 'difficult') {\n                                color = 'volcano';\n                            }\n                            return (\n                                <Tag color={color} key={tag}>\n                                    {tag.toUpperCase()}\n                                </Tag>\n                            );\n                        })}\n                    </span>\n                ),\n                filters: [{ text: 'easy', value: 'easy' }, { text: 'bonus', value: 'bonus' }],\n                filteredValue: filteredInfo.name || null,\n            },\n            {\n                title: 'Action',\n                key: 'action',\n                render: (text, record) => (\n                    <span>\n                        <a href=\"javascript:;\">Edit {record.name}</a>\n                        <Divider type=\"vertical\" />\n                        <a href=\"javascript:;\">Delete</a>\n                    </span>\n                ),\n            },\n        ];\n\n        return (\n            <div style={{ padding: 24, background: '#fff', minHeight: 360 }}>\n                <Table size=\"middle\" rowSelection={rowSelection} columns={columns} dataSource={data} />\n                <Button icon=\"plus\" type=\"primary\">New</Button>\n                <Button icon=\"file\" type=\"success\" disabled={!hasSelected} style={{margin: \"0 0 0 16px\"}}>Generate Quiz</Button>\n            </div>\n        )\n    }\n}","import React, {Suspense} from \"react\";\nimport DocumentTitle from 'react-document-title';\nimport {Button, Icon, Layout, Breadcrumb} from \"antd\";\nimport \"./index.css\";\nimport SideNav from \"../SideNav\";\n\n/**\n * The very basic layout for the entire app\n */\nexport default class BasicLayout extends React.Component {\n    footer = \"Project SciLo - Frontend\";\n\n    getContext() {\n        let { location, breadcrumbNameList } = this.props;\n        location = \"SciLo\";\n        breadcrumbNameList = [\"Question Bank\", \"Math 101\"];\n\n        return {\n            location,\n            breadcrumbNameList,\n        };\n    }\n\n    render() {\n        const { Header, Footer, Content } = Layout;\n\n        const layout = (\n            <Layout className=\"BasicLayout\">\n                <SideNav/>\n                <Layout style={{ marginLeft: 200 }}>\n                    <Header className=\"Header\">\n                        <Breadcrumb>\n                            <Breadcrumb.Item href=\"\">\n                                <Icon type=\"home\" />\n                            </Breadcrumb.Item>\n\n                            {this.getContext().breadcrumbNameList.map(item => {\n                                let i=1;\n                                return (\n                                    <Breadcrumb.Item key={i++}>\n                                        {item}\n                                    </Breadcrumb.Item>\n                                )}\n                            )}\n                        </Breadcrumb>\n                    </Header>\n\n                    <Content className=\"Content\">\n                        {this.props.children}\n                    </Content>\n                    <Footer className=\"Footer\">\n                        {this.footer}\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n\n        return (\n            <React.Fragment>\n                <DocumentTitle title={this.getContext().location}>\n                    {layout}\n                </DocumentTitle>\n            </React.Fragment>\n        )\n    }\n}","export default [\n    {\n        title: \"Mock Question 1\",\n        text: \"Some basic mathematical calculations... Good Luck!\",\n        tags: [\n            \"Easy\",\n            \"Math\"\n        ],\n        responses: [\n            {\n                type: \"input\",\n                text: \"What is the result of 1 + 1?\",\n                answers: [\n                    {\n                        text: \"2\",\n                        grade: 100,\n                    },\n                    {\n                        text: \"two\",\n                        grade: 100,\n                    },\n                    {\n                        text: \"0\",\n                        grade: 10,\n                    },\n                ]\n            },\n            {\n                type: \"input\",\n                text: \"What is the result of 1.5 * 2?\",\n                answers: [\n                    {\n                        text: \"3\",\n                        grade: 100,\n                    }\n                ]\n            }\n        ]\n    },\n    {\n        title: \"Mock Question 2\",\n        text: \"Some interesting multiple choice questions.\",\n        tags: [\n            \"Fun\"\n        ],\n        responses: [\n            {\n                type: \"multiple\",\n                single: true,\n                dropdown: false,\n                text: \"Select 'Red'\",\n                answers: [\n                    {\n                        text: \"Blue\",\n                        grade: 0,\n                    },\n                    {\n                        text: \"Red\",\n                        grade: 100,\n                    },\n                    {\n                        text: \"red\",\n                        grade: 50,\n                    }\n                ]\n            },\n            {\n                type: \"multiple\",\n                single: false,\n                dropdown: false,\n                text: \"Select red color\",\n                answers: [\n                    {\n                        text: \"Blue\",\n                        grade: -50,\n                    },\n                    {\n                        text: \"Red\",\n                        grade: 50,\n                    },\n                    {\n                        text: \"red\",\n                        grade: 50,\n                    }\n                ]\n            },\n            {\n                type: \"multiple\",\n                single: false,\n                dropdown: true,\n                text: \"Select red color\",\n                answers: [\n                    {\n                        text: \"Blue\",\n                        grade: -50,\n                    },\n                    {\n                        text: \"Red\",\n                        grade: 50,\n                    },\n                    {\n                        text: \"red\",\n                        grade: 50,\n                    }\n                ]\n            }\n        ]\n    }\n\n]","/**\n * mock tags\n */\nimport { Select } from 'antd';\nimport React from \"react\";\n\nconst Option = Select.Option;\n\nconst tags = [\n    \"easy\",\n    \"normal\",\n    \"hard\",\n    \"bonus\",\n    \"mathematical\"\n];\n\n\nexport default tags.map(tag => <Option key={tag}>{tag}</Option>)","import React from \"react\";\n\nimport {\n    Form,\n    Input,\n    Icon,\n    Button,\n    Select,\n    Divider,\n    Card,\n    Radio,\n    Checkbox,\n    Col,\n    InputNumber,\n    Switch,\n    Tooltip\n} from 'antd';\nimport tags from \"../../mocks/Tags\";\nimport theme from \"../../config/theme\"\n\nlet id = 0;\n\n/**\n * Multiple Choice form template\n */\nclass MultipleChoice extends React.Component {\n    remove = k => {\n        const { form } = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n\n        // can use data-binding to set\n        form.setFieldsValue({\n            keys: keys.filter(key => key !== k),\n        });\n    };\n\n    add = () => {\n        const { form } = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(id++);\n        // can use data-binding to set\n        // important! notify form to detect changes\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const { keys, names } = values;\n                console.log('Received values of form: ', values);\n                console.log('Merged values:', keys.map(key => names[key]));\n            }\n        });\n    };\n\n    render() {\n        const { TextArea } = Input;\n        const { getFieldDecorator, getFieldValue } = this.props.form;\n\n        const formItemLayout = {\n            labelCol: { span: 4 },\n            wrapperCol: { span: 20 },\n        };\n\n        const formItemLayoutWithoutLabel = {\n            wrapperCol: { span: 24 },\n        };\n\n        const buttonItemLayout = {\n            wrapperCol: { span: 14, offset: 4 },\n        };\n        getFieldDecorator('keys', { initialValue: [] });\n        const keys = getFieldValue('keys');\n        const formItems = keys.map((k, index) => (\n            <>\n                <Form.Item\n                    {...formItemLayout}\n                    label={\"choice \" + k}\n                    required={false}\n                    key={k}\n                >\n                    {getFieldDecorator(`names[${k}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [\n                            {\n                                required: true,\n                                whitespace: true,\n                                message: \"Cannot have empty body choice.\",\n                            },\n                        ],\n                    })(<Input placeholder=\"choice content\" style={{ width: '60%', marginRight: 8 }} />)}\n                    <Icon\n                        className=\"dynamic-delete-button\"\n                        type=\"minus-circle-o\"\n                        onClick={() => this.remove(k)}\n                    />\n                    <Col>\n                        Grade\n                        <InputNumber\n                            defaultValue={k===0?100:0}\n                            formatter={value => `${value}%`}\n                            parser={value => value.replace('%', '')}\n                        />\n                    </Col>\n\n                </Form.Item>\n            </>\n\n        ));\n\n\n        return (\n            <Form>\n                <Card\n                    title={this.props.title}\n                    type=\"inner\"\n                    size=\"small\"\n                    bodyStyle={{backgroundColor: theme[\"@white\"]}}\n                    extra={\n                        <Icon type=\"delete\" onClick={this.props.remove}/>\n                    }\n                >\n                <Form.Item label=\"Text\" {...formItemLayout}>\n                    <TextArea autosize={{ minRows: 2, maxRows: 6 }} placeholder=\"description of this response\" />\n                </Form.Item>\n                <Divider />\n                {formItems}\n                <Form.Item {...formItemLayoutWithoutLabel}>\n                    <Button type=\"default\" icon=\"plus\" onClick={this.add}>\n                        Add choice\n                    </Button>\n                    <Tooltip title=\"Use a dropdown menu for rendering (useful when having many options)\">\n                    <Switch style={{float: \"right\"}} checkedChildren=\"Dropdown\" unCheckedChildren=\"Selection\" />\n                    </Tooltip>\n                </Form.Item>\n                </Card>\n            </Form>\n        );\n    }\n}\n\nexport default Form.create({ name: 'MultipleChoice' })(MultipleChoice);","import React from \"react\";\n\nimport {Form, Input, Icon, Button, Select, Divider, Card, Radio, Checkbox, Col, InputNumber} from 'antd';\nimport tags from \"../../mocks/Tags\";\nimport theme from \"../../config/theme\"\n\nlet id = 0;\n\n/**\n * Multiple Choice form template\n */\nclass InputField extends React.Component {\n    remove = k => {\n        const { form } = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n\n        // can use data-binding to set\n        form.setFieldsValue({\n            keys: keys.filter(key => key !== k),\n        });\n    };\n\n    add = () => {\n        const { form } = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n        const nextKeys = keys.concat(id++);\n        // can use data-binding to set\n        // important! notify form to detect changes\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const { keys, names } = values;\n                console.log('Received values of form: ', values);\n                console.log('Merged values:', keys.map(key => names[key]));\n            }\n        });\n    };\n\n    render() {\n        const { TextArea } = Input;\n        const { getFieldDecorator, getFieldValue } = this.props.form;\n\n        const formItemLayout = {\n            labelCol: { span: 4 },\n            wrapperCol: { span: 20 },\n        };\n\n        const formItemLayoutWithoutLabel = {\n            wrapperCol: { span: 24 },\n        };\n\n        const buttonItemLayout = {\n            wrapperCol: { span: 14, offset: 4 },\n        };\n        getFieldDecorator('keys', { initialValue: [] });\n        const keys = getFieldValue('keys');\n        const formItems = keys.map((k, index) => (\n            <>\n                <Form.Item\n                    {...formItemLayout}\n                    label={\"answers \" + k}\n                    required={false}\n                    key={k}\n                >\n                    {getFieldDecorator(`names[${k}]`, {\n                        validateTrigger: ['onChange', 'onBlur'],\n                        rules: [\n                            {\n                                required: true,\n                                whitespace: true,\n                                message: \"Cannot have empty body.\",\n                            },\n                        ],\n                    })(<Input placeholder=\"enter an answer\" style={{ width: '60%', marginRight: 8 }} />)}\n                    <Icon\n                        className=\"dynamic-delete-button\"\n                        type=\"minus-circle-o\"\n                        onClick={() => this.remove(k)}\n                    />\n                    <Col>\n                        Grade\n                        <InputNumber\n                            defaultValue={k===0?100:0}\n                            formatter={value => `${value}%`}\n                            parser={value => value.replace('%', '')}\n                        />\n                    </Col>\n\n                </Form.Item>\n            </>\n\n        ));\n\n\n        return (\n            <Form>\n                <Card\n                    title={this.props.title}\n                    type=\"inner\"\n                    size=\"small\"\n                    bodyStyle={{backgroundColor: theme[\"@white\"]}}\n                    extra={\n                        <Icon type=\"delete\" onClick={this.props.remove}/>\n                    }\n                >\n                <Form.Item label=\"Text\" {...formItemLayout}>\n                    <TextArea autosize={{ minRows: 2, maxRows: 6 }} placeholder=\"description of this response\" />\n                </Form.Item>\n                <Divider />\n                {formItems}\n                <Form.Item {...formItemLayoutWithoutLabel}>\n                    <Button type=\"default\" icon=\"plus\" onClick={this.add}>\n                        Add a potential answer\n                    </Button>\n                </Form.Item>\n                </Card>\n            </Form>\n        );\n    }\n}\n\nexport default Form.create({ name: 'InputField' })(InputField);","import React from \"react\";\n\nimport {Form, Input, Icon, Button, Select, Divider, Modal, Radio, Card} from 'antd';\nimport tags from \"../../mocks/Tags\";\nimport MultipleChoice from \"../DefaultQuestionTypes/MultipleChoice\";\nimport InputField from \"../DefaultQuestionTypes/InputField\";\nimport theme from \"../../config/theme\";\n\nlet id = 0;\n\nclass CreateQuestionForm extends React.Component {\n    state = {\n        typeOfComponentToAdd: undefined,\n        pairs: {}\n    };\n\n\n    remove = k => {\n        const { form } = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n\n        // can use data-binding to set\n        form.setFieldsValue({\n            keys: keys.filter(key => key !== k),\n        });\n    };\n\n    add = () => {\n        const { form } = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n        const pairs = this.state.pairs;\n        pairs[id] = this.state.typeOfComponentToAdd;\n        const nextKeys = keys.concat(id);\n        id++;\n        // can use data-binding to set\n        // important! notify form to detect changes\n        form.setFieldsValue({\n            keys: nextKeys,\n        });\n\n        this.setState({pairs})\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const { keys, names } = values;\n                console.log('Received values of form: ', values);\n                console.log('Merged values:', keys.map(key => names[key]));\n            }\n        });\n    };\n\n    onSelectComponentChange = e => {\n        console.log('radio checked', e);\n        this.setState({\n            typeOfComponentToAdd: e,\n        });\n    };\n\n    addComponent = () => {\n        const Option = Select.Option;\n\n        const group = <Select\n            showSearch\n            onChange={this.onSelectComponentChange}\n            style={{ width: 200 }}\n            placeholder=\"Select a template\"\n            optionFilterProp=\"children\"\n            filterOption={(input, option) =>\n                option.props.children.toLowerCase().indexOf(input.toLowerCase()) >= 0\n            }\n        >\n            <Option value=\"input\">Input Field</Option>\n            <Option value=\"multiple\">Multiple Choice</Option>\n            <Option value=\"custom\">Custom Templates</Option>\n        </Select>;\n\n        this.addModal = Modal.confirm({\n            title: 'Add Response',\n            content: group,\n            okText: 'OK',\n            cancelText: 'Cancel',\n            onOk: args => {\n                this.addModal.destroy();\n                this.add();\n            }\n        });\n    }\n\n\n    render() {\n        const { TextArea } = Input;\n        const { getFieldDecorator, getFieldValue, getFieldsValue } = this.props.form;\n\n        const formItemLayout = {\n            labelCol: { span: 4 },\n            wrapperCol: { span: 20 },\n        };\n\n        const formItemLayoutWithoutLabel = {\n            wrapperCol: { span: 24 },\n        };\n\n        const buttonItemLayout = {\n            wrapperCol: { span: 14, offset: 4 },\n        };\n        getFieldDecorator('keys', { initialValue: [] });\n        const keys = getFieldValue('keys');\n        const pairs = this.state.pairs;\n\n        const formItems = keys.map((k, index) => {\n            switch (pairs[k]) {\n                case \"input\":\n                    return (<InputField title={\"Input Field \"+ k} remove={()=>{this.remove(k)}}/>);\n                case \"multiple\":\n                    return (<MultipleChoice title={\"Multiple Choice \"+k} remove={()=>{this.remove(k)}}/>);\n                default:\n                    return (<Card\n                        title={\"Custom Template \" + k}\n                        type=\"inner\"\n                        size=\"small\"\n                        bodyStyle={{backgroundColor: theme[\"@white\"]}}\n                        extra={\n                            <Icon type=\"delete\" onClick={()=>{this.remove(k)}}/>\n                        }>Some custom templates</Card>)\n            }\n        });\n\n        return (\n            <Form>\n                <Form.Item required label=\"Title\" {...formItemLayout}>\n                    <Input placeholder=\"enter a title\" />\n                </Form.Item>\n                <Form.Item label=\"Text\" {...formItemLayout}>\n                    <TextArea autosize={{ minRows: 2, maxRows: 6 }} placeholder=\"description of the question\" />\n                </Form.Item>\n                <Form.Item label=\"Tags\" {...formItemLayout}>\n                    <Select mode=\"tags\" style={{ width: '100%' }} tokenSeparators={[',']}>\n                        {tags}\n                    </Select>\n                </Form.Item>\n                <Divider/>\n                {formItems}\n                <Form.Item {...formItemLayoutWithoutLabel}>\n                    <Button type=\"dashed\" onClick={this.addComponent} style={{ width: '100%' }}>\n                        <Icon type=\"plus\" /> Add New Response\n                    </Button>\n                </Form.Item>\n                <Divider/>\n                <Form.Item>\n                    <Button type=\"primary\">Save</Button>\n                    <Button type=\"default\" style={{float: \"right\"}} onClick={this.handleSubmit}>Submit</Button>\n                </Form.Item>\n            </Form>\n        );\n    }\n}\n\nexport default Form.create({ name: 'CreateQuestionForm' })(CreateQuestionForm);","import React from \"react\";\nimport {Button, Card, Divider, Input, Tag, message, Select, Radio, Checkbox} from \"antd\";\nimport questions from \"../../mocks/Questions\";\nimport theme from \"../../config/theme\";\n\nexport default class BasicFrame extends React.Component {\n\n    state = {\n        marked: false,\n        grade: \"\",\n        highestWeight: 0,\n        answers: {}\n    };\n\n    componentDidMount() {\n        let Sum = 0;\n        this.props.question.responses.forEach(c=> {\n            if (c.single!==false) {\n                Sum += Math.max.apply(Math, c.answers.map(function(o) { return o.grade; }));\n            }\n            else {\n                c.answers.forEach(r => {\n                    if (r.grade > 0) {\n                        Sum += r.grade;\n                    }\n                })\n            }\n\n        });\n        this.setState({highestWeight: Sum})\n    }\n\n    renderComponents = () => {\n        let id=0;\n        return this.props.question.responses.map(component => {\n            id++;\n            switch (component.type) {\n                case \"input\":\n                    return this.renderInput(component, id);\n                case \"multiple\":\n                    if (component.dropdown) {\n                        return this.renderDropDown(component, id);\n                    }\n                    else {\n                        return this.renderMultiple(component, id);\n                    }\n            }\n        })\n    };\n\n    renderInput = (c, id) => {\n        let renderMark;\n        const mark = this.calculateMark(id, c.answers);\n        renderMark = this.state.marked?<span style={{color: \"red\"}}>{mark}</span>:undefined;\n\n        return (\n            <div style={{backgroundColor: theme[\"@white\"], marginBottom: \"12px\", padding: \"12px\"}}>\n                <p><strong>{c.text}</strong></p>\n                <Input\n                    addonBefore=\"Answer\"\n                    value={this.state.answers[id]}\n                    disabled={this.state.marked}\n                    addonAfter={renderMark}\n                    onChange={\n                        (e)=> {\n                            let answers = this.state.answers;\n                            answers[id] = e.target.value;\n                            this.setState({answers});\n                        }\n                    }\n                />\n            </div>\n        )\n    };\n\n    renderDropDown = (c, id) => {\n        let renderMark;\n        const mark = this.calculateMark(id, c.answers);\n        renderMark = this.state.marked?<span style={{color: \"red\"}}>{mark}</span>:undefined;\n\n        let dropdown;\n        const Option = Select.Option;\n        dropdown = <Select\n            mode={c.single?\"default\":\"multiple\"}\n            style={{width:\"100%\"}}\n            onChange={\n                (e)=> {\n                    let answers = this.state.answers;\n                    answers[id] = e;\n                    this.setState({answers});\n                }\n            }\n            disabled={this.state.marked}\n        >\n            {c.answers.map(r=><Option value={r.text}>{r.text}</Option>)}\n        </Select>;\n\n        return (\n            <div style={{backgroundColor: theme[\"@white\"], marginBottom: \"12px\", padding: \"12px\"}}>\n                <p><strong>{c.text}</strong></p>\n                {dropdown}\n                {renderMark}\n            </div>\n        )\n    };\n\n    renderMultiple = (c, id) => {\n\n        let renderMark;\n        const mark = this.calculateMark(id, c.answers);\n        renderMark = this.state.marked?<span style={{color: \"red\"}}>{mark}</span>:undefined;\n\n        const RadioGroup = Radio.Group;\n        const CheckboxGroup = Checkbox.Group;\n\n        let choices;\n\n        const optionStyle = {\n            display: 'block',\n            height: '30px',\n            lineHeight: '30px',\n        };\n\n        if (c.single) {\n            choices = (\n                <RadioGroup\n                    onChange={\n                        (e) => {\n                            let answers = this.state.answers;\n                            answers[id] = e.target.value;\n                            this.setState({answers});\n                        }\n                    }\n                    value={this.state.answers[id]}\n                    disabled={this.state.marked}\n                >\n                    {c.answers.map(r=><Radio value={r.text} style={optionStyle}>{r.text}</Radio>)}\n                </RadioGroup>\n            );\n        }\n        else {\n            choices = <CheckboxGroup\n                options={\n                    c.answers.map(r=>({label: r.text, value: r.text}))\n                }\n                disabled={this.state.marked}\n                onChange={\n                    (e) => {\n                        let answers = this.state.answers;\n                        answers[id] = e;\n                        this.setState({answers});\n                    }\n                }\n            />\n        }\n\n        return (\n            <div style={{backgroundColor: theme[\"@white\"], marginBottom: \"12px\", padding: \"12px\"}}>\n                <p><strong>{c.text}</strong></p>\n                {choices}\n                {renderMark}\n            </div>\n        )\n    };\n\n    renderTags = () => {\n        return this.props.question.tags.map(tag => (<Tag color={theme[\"@primary-color\"]}>{tag}</Tag>))\n    };\n\n    save = () => {\n        message\n            .loading('Saving..', 2.5)\n            .then(() => message.success('Saved', 2.5))\n            .then(() => message.info('This is only a mock for saving', 2.5));\n    };\n\n    submit = () => {\n        this.setState({marked: !this.state.marked});\n        let grade = 0;\n        Object.keys(this.state.answers).forEach(id=>{\n            grade += this.calculateMark(id, this.props.question.responses[id-1].answers);\n        })\n        this.setState({grade});\n    };\n\n    calculateMark = (id, response) => {\n        let mark = 0;\n        const answer = this.state.answers[id];\n        console.log(answer, response)\n\n        response.forEach(r=>{\n            if (answer&&Array.isArray(answer)) {\n                answer.forEach(a=>{\n                    if (r.text == a) {\n                        mark += r.grade;\n                    }\n                })\n            }\n            else {\n                if (r.text == answer) {\n                    mark = r.grade;\n                }\n            }\n        })\n        return mark;\n    };\n\n    render() {\n        const { Meta } = Card;\n        const ButtonGroup = Button.Group;\n\n        return (\n            <div>\n                <Card\n                    type={\"inner\"}\n                    title={this.props.question.title}\n                    extra={this.state.grade+\"/\"+this.state.highestWeight}\n                    //bodyStyle={{backgroundColor: theme[\"@white\"]}}\n                >\n                    <Meta\n                        title={this.props.question.background}\n                        //description={this.renderTags()}\n                    />\n                    <Divider style={{marginTop: \"12px\", marginBottom: \"12px\"}}/>\n                    {this.renderComponents()}\n                    <Divider/>\n                    <ButtonGroup>\n                        <Button type=\"default\" icon=\"save\" onClick={this.save}>Save</Button>\n                        <Button type=\"danger\" icon=\"upload\" onClick={this.submit}>Submit</Button>\n                    </ButtonGroup>\n                </Card>\n            </div>\n        )\n    }\n}","import React from \"react\";\nimport {Button, Col, Divider, Empty, Form, Icon, Input, Layout, Radio, Row, Select} from \"antd\";\nimport data from \"../../mocks/QuestionBankTable\";\nimport questions from \"../../mocks/Questions\";\nimport tags from \"../../mocks/Tags\"\nimport CreateQuestionForm from \"../../components/forms/CreateQuestionForm\";\nimport BasicFrame from \"../../components/QuestionPreviews/BasicFrame\";\n\n\nlet id = 0;\n\nexport default class CreateQuestions extends React.Component {\n\n    state = {\n        questions: []\n    };\n\n    remove = k => {\n        const { form } = this.props;\n        // can use data-binding to get\n        const keys = form.getFieldValue('keys');\n        // We need at least one passenger\n        if (keys.length === 1) {\n            return;\n        }\n\n        // can use data-binding to set\n        form.setFieldsValue({\n            keys: keys.filter(key => key !== k),\n        });\n    };\n\n    add = () => {\n        let questions = this.state.questions;\n        questions.push(\n            <div id={id}>\n                <span>new response {id}</span>\n                <Input style={{width: \"70%\", float: \"right\"}}/>\n            </div>\n        );\n        id = id + 1;\n        this.setState(questions)\n    };\n\n    handleSubmit = e => {\n        e.preventDefault();\n        /*\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                const { keys, names } = values;\n                console.log('Received values of form: ', values);\n                console.log('Merged values:', keys.map(key => names[key]));\n            }\n        });\n        */\n    };\n\n    render() {\n\n        const formItemLayout = {\n            labelCol: { span: 4 },\n            wrapperCol: { span: 20 },\n        };\n\n        const formItemLayoutWithoutLabel = {\n            wrapperCol: { span: 24 },\n        };\n\n        const buttonItemLayout = {\n            wrapperCol: { span: 14, offset: 4 },\n        };\n\n        const colResponsive = {\n            xs: 24,\n            sm: 24,\n            md: 24,\n            lg: 24,\n            xl: 12\n        };\n\n        const divider = {\n            xs: 24,\n            sm: 24,\n            md: 24,\n            lg: 24,\n            xl: 0\n        };\n\n        const { TextArea } = Input;\n\n\n\n        return (\n            <Row gutter={8}>\n                <Col {...colResponsive} >\n                    <div style={{ padding: 24, background: '#fff', minHeight: \"80vh\" }}>\n                        <h1>New Question</h1>\n                        <CreateQuestionForm/>\n                    </div>\n                </Col>\n                <Col {...divider}><div><Divider/></div></Col>\n                <Col {...colResponsive}>\n                    <div style={{ padding: 24, background: '#fff', minHeight: \"80vh\" }}>\n                        <h1>Preview</h1>\n                        {questions.map(question=>(<BasicFrame question={question}/>))}\n                        {questions.length ?\n                            undefined\n                            :<Empty />\n                        }\n                    </div>\n                </Col>\n            </Row>\n\n        )\n    }\n}","import React from 'react';\nimport {Breadcrumb, Button, Divider, Icon, Layout, Menu, Table, Tag} from \"antd\";\nimport './App.css';\nimport SketchQuestionBank from \"./layouts/SketchQuestionBank\";\nimport QuestionBankTable from \"./pages/QuestionBankTable\"\nimport BasicLayout from \"./layouts/BasicLayout\";\nimport CreateQuestions from \"./pages/CreateQuestions\";\n\nexport default class App extends React.Component{\n    render() {\n        return (\n            <BasicLayout>\n                {/*<QuestionBankTable/>*/}\n                <CreateQuestions/>\n            </BasicLayout>\n        )\n    }\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}