swagger: '2.0'
info:
  description: This is a simple API
  version: 1.0.0
  title: Simple Inventory API
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: Quiz
  description: about quiz
- name: Course
  description: about course
- name: QuizAttempt
  description: about QuizAttempt

paths:

  /api/quiz-attempt/:id/submit:
    post:
      tags:
        - QuizAttempt
      parameters:
        - in: path
          type: integer
          name: id
          required: true
        - in: body
          schema:
            type: object
            example: {
  "submit": true,
  "questions": [
    {
      "id": 48,
      "responses": [
        {
          "id": 29,
          "answer": "hi"
        }
      ]
    }
  ]
}

          name: body
          required: true
      responses:
        '200':
          description: OK
  /api/course/:course_id/quiz/:quiz_id/quiz-attempts:
    get:
      tags:
        - QuizAttempt
      parameters:
        - in: path
          type: integer
          name: course_id
          required: true
        - in: path
          type: integer
          name: quiz_id
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              type: object
              $ref: '#/definitions/QuizAttempt'

  /api/course/:course_id/quiz/:quiz_id/quiz-attempt:
    post:
      tags:
        - QuizAttempt
      parameters:
        - in: path
          type: integer
          name: course_id
          required: true
        - in: path
          type: integer
          name: quiz_id
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/QuizAttempt'

  /api/quiz-attempt/:id:
    get:
      tags:
        - QuizAttempt
      parameters:
        - in: path
          type: integer
          name: id
          required: true
      responses:
        '200':
          description: OK
          schema:
            type: object
            example:
              $ref: '#/definitions/QuizAttempt'


  /api/course/:course_id/quizzes:
    get:
      tags:
        - Course
      description: get all quizzes in a course
      responses:
        '200':
          description: OK
          schema:
            example: [{
    "id": 15,
    "start_end_time": [
      "2019-07-04T12:27:11Z",
      "2019-07-06T12:27:11Z"
    ],
    "status": "done",
    "title": "123",
    "bonus": 0,
    "last_modify_date": "2019-10-01T20:19:55.067989Z",
    "late_time": "2019-08-10T12:27:11Z",
    "show_solution_date": "2019-07-10T12:27:11Z",
    "options": {
      "policy": "average",
      "max_tries": 3,
      "free_tries": 0,
      "penalty_per_try": 0
    },
    "course": 7
  }]

  /api/course/:course_id/users:
    post:
      tags:
        - Course
      description: add questions to a course
      parameters:
        - in: path
          type: integer
          name: course_id
          required: true
        - in: body
          name: users
          required: true
          description: list of user's id
          schema:
            type: array
            items:
              type: integer
            example: ["1", "2", "3"]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Course'

    delete:
      tags:
        - Course
      description: add questions to a course
      parameters:
        - in: path
          type: integer
          name: course_id
          required: true
        - in: body
          name: users
          required: true
          description: list of user's id
          schema:
            type: array
            items:
              type: integer
            example: ["1", "2", "3"]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Course'


  /api/group/:group_id:
    delete:
      tags:
        - Course
      description:  delete a group
      parameters:
        - in: path
          type: integer
          name: group_id
          required: true
      responses:
        '200':
          description: OK

  /api/group/:group_id/users:
    get:
      tags:
        - Course
      description: add users in a group
      parameters:
        - in: path
          type: integer
          name: group_id
          required: true
        - in: body
          name: users
          required: true
          description: list of user's id
          schema:
            type: array
            items:
              type: integer
            example: ["1", "2", "3"]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Group'
    delete:
      tags:
        - Course
      description: add users in a group
      parameters:
        - in: path
          type: integer
          name: group_id
          required: true
        - in: body
          name: users
          required: true
          description: list of user's id
          schema:
            type: array
            items:
              type: integer
            example: ["2", "3"]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Group'

  /api/course/:course_id/questions:
    post:
      tags:
        - Course
      description: add questions to a course
      parameters:
        - in: path
          type: integer
          name: course_id
          required: true
        - in: body
          name: questions
          required: true
          description: list of question's id
          schema:
            type: array
            items:
              type: object
            example: [{"id": 37,"title": "Mock Question 2"}, {"id": 38,"title": "Mock Question 3"}]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Course'

    delete:
      tags:
        - Course
      description: delete questions to a course
      parameters:
        - in: path
          type: integer
          name: course_id
          required: true
        - in: body
          name: questions
          required: true
          description: list of question's id
          schema:
            type: array
            items:
              type: object
            example: [{"id": 37,"title": "Mock Question 2"}, {"id": 38,"title": "Mock Question 3"}]
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Course'



  /api/course:
    post:
      tags:
        - Course
      description: create a course
      produces:
      - application/json
      parameters:
        - in: body
          name: fullname
          required: true
          description: fullname and shortname of the course
          schema:
            example: {
              "fullname": "CMPUT 204 algorithm A1",
              "shortname": "CMPUT204"
            }
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Course'


  /api/courses:
    get:
      tags:
        - Course
      description: get all courses user can access
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Course'

  /api/course/:course_id/quiz/:quiz_id:
    get:
      tags:
      - Quiz
      description: |
        get quiz by quiz id
      produces:
      - application/json
      parameters:
        - in: path
          type: integer
          name: course_id
          required: true
        - in: path
          type: integer
          name: qui_id
          required: true
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Quiz'

    delete:
      tags:
      - Quiz
      description: delete a quiz
      parameters:
        - in: path
          type: integer
          name: course_id
          required: true
        - in: path
          type: integer
          name: qui_id
          required: true
      responses:
        '200':
          description: OK

  /api/course/:course_id/quiz:
    post:
      tags:
      - Quiz
      description: |
        create a quiz in a course
      parameters:
        - in: path
          name: course_id
          type: string
          required: true
          description: course's id
        - in: body
          name: body
          schema:
            example: {
  "title": "123",
  "start_end_time": [
    "2019-07-04 12:27:11",
    "2019-07-06 12:27:11"
  ],
  "questions": [
    {
      "id": "48",
      "mark": "50"
    },
    {
      "id": "50",
      "mark": "50"
    }
  ],
  "show_solution_date": "2019-07-10 12:27:11",
  "late_time": "2019-08-10 12:27:11",
  "options": {
    "max_tries": 3,
    "free_tries": 0,
    "penalty_per_try": 0,
    "policy": "average"
  }
}
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Quiz'

  /api/quizzes:
    get:
      tags:
      - Quiz
      operationId: getQuizzes
      description: |
        get all quizzes that user can access
      produces:
      - application/json

      responses:
        200:
          description: OK
          schema:
            type: array
            items:
               $ref: '#/definitions/SimpleQuiz'











definitions:





  QuizAttempt:
    type: object
    example: {
  "id": 5,
  "quiz": {
    "id": 9,
    "start_end_time": [
      "2019-07-04T12:27:11Z",
      "2019-07-06T12:27:11Z"
    ],
    "status": "done",
    "title": "123",
    "bonus": 0,
    "last_modify_date": "2019-09-27T03:07:53.092996Z",
    "late_time": "2019-08-10T12:27:11Z",
    "show_solution_date": "2019-07-10T12:27:11Z",
    "options": {
      "policy": "average",
      "max_tries": 3,
      "free_tries": 0,
      "penalty_per_try": 0
    },
    "course": 6,
    "questions": [
      {
        "id": 48,
        "tags": [
          {
            "id": 1,
            "name": "fun"
          },
          {
            "id": 2,
            "name": "color"
          }
        ],
        "variables": [],
        "responses": [
          {
            "id": 29,
            "index": 0,
            "text": "Select 'Red'",
            "mark": 100,
            "type": {
              "name": "multiple",
              "single": true,
              "dropdown": false
            },
            "tries": [
              [
                "hi",
                0,
                false
              ],
              [
                "hi",
                0,
                false
              ],
              [
                "hi",
                0,
                false
              ]
            ],
            "left_tries": 0
          }
        ],
        "title": "Mock Question 2",
        "text": "Some interesting multiple choice questions.",
        "last_modify_date": "2019-09-27T02:47:56.642130Z",
        "mark": 50,
        "grade": 0.0
      }
    ],
    "grade": 0.0
  }
}


  GroupUser:
    type: object
    properties:
      id:
        type: integer
        example: 1
      username:
        type: string
        example: SeanP2019
      first_name:
        type: string
        example: Sean
      last_name:
        type: string
        example: Penn
      email:
        type: string
        example: seanpenn2019@fake.com


  Group:
    type: object
    properties:
      id:
        type: integer
        example: 1
      name:
        type: string
        example: COURSE_CMPUT204A1_instructor_group
      users:
        type: array
        items:
          $ref: '#/definitions/GroupUser'


  Course:
    type: object
    properties:
      id:
        type: integer
        example: 1
      fullname:
        type: string
        example: CMPUT 204 algorithm A1
      shortname:
        type: string
        example: CMPUT204A1
      groups:
        type: array
        items:
          $ref: '#/definitions/Group'
      questions:
        type: array
        items:
          example: {
      "id": 37,
      "tags": [],
      "variables": [],
      "responses": [],
      "title": "Mock Question 2",
      "last_modify_date": "2019-09-16T21:00:23.292107Z",
      "author": {
        "id": 2,
        "username": "test"
      }
    }

  SimpleQuiz:
    type: object
    example:
              {
    "id": 5,
    "start_end_time": [
      "2019-07-04T12:27:11Z",
      "2019-07-06T12:27:11Z"
    ],
    "status": "done",
    "title": "123",
    "bonus": 0,
    "last_modify_date": "2019-09-26T23:42:29.543155Z",
    "late_time": "2019-08-10T12:27:11Z",
    "show_solution_date": "2019-07-10T12:27:11Z",
    "options": {
      "policy": "average",
      "max_tries": 3,
      "free_tries": 0,
      "penalty_per_try": 0
    },
    "course": 3
  }

  Quiz:
    type: object
    example:
              {
    "id": 5,
    "start_end_time": [
      "2019-07-04T12:27:11Z",
      "2019-07-06T12:27:11Z"
    ],
    "status": "done",
    "title": "123",
    "bonus": 0,
    "last_modify_date": "2019-09-26T23:42:29.543155Z",
    "late_time": "2019-08-10T12:27:11Z",
    "show_solution_date": "2019-07-10T12:27:11Z",
    "options": {
      "policy": "average",
      "max_tries": 3,
      "free_tries": 0,
      "penalty_per_try": 0
    },
    "course": 3,
    "questions": [
     {
      "author": {
        "id": 2,
        "is_instructor": true,
        "is_active": true,
        "last_login": null,
        "avatar": "/api/userprofile/2/avatar",
        "date_joined": "2019-09-16T20:11:33.787809Z",
        "first_name": "",
        "email_active": false,
        "institute": null,
        "username": "test",
        "last_name": "",
        "email": "hhhh@ualberta.ca",
        "is_staff": false
      },
      "course": null,
      "id": 1,
      "quizzes": [
        2,
      ],
      "title": "Mock Question 2",
      "variables": [],
      "responses": [
        {
          "grade_policy": {
            "max_tries": 3,
            "free_tries": 0,
            "penalty_per_try": 0,
            "policy": "average"
          },
          "id": 1,
          "mark": 100,
          "question": 1,
          "text": "Select 'Red'",
          "algorithm": {
            "name": "string",
            "ignore_case": false
          },
          "type": {
            "name": "multiple",
            "single": true,
            "dropdown": false
          },
          "index": 0
        }
      ],
      "text": "Some interesting multiple choice questions.",
      "last_modify_date": "2019-09-16T21:00:21.148479Z",
      "mark": 50,
      "tags": [
        {
          "id": 2,
          "name": "color"
        }
      ]
    }
    ]
  }

  Question:
    type: object
    example:
     {
      "author": {
        "id": 2,
        "is_instructor": true,
        "is_active": true,
        "last_login": null,
        "avatar": "/api/userprofile/2/avatar",
        "date_joined": "2019-09-16T20:11:33.787809Z",
        "first_name": "",
        "email_active": false,
        "institute": null,
        "username": "test",
        "last_name": "",
        "email": "hhhh@ualberta.ca",
        "is_staff": false
      },
      "course": null,
      "id": 1,
      "quizzes": [
        2,
      ],
      "title": "Mock Question 2",
      "variables": [],
      "responses": [
        {
          "grade_policy": {
            "max_tries": 3,
            "free_tries": 0,
            "penalty_per_try": 0,
            "policy": "average"
          },
          "id": 1,
          "mark": 100,
          "question": 1,
          "text": "Select 'Red'",
          "algorithm": {
            "name": "string",
            "ignore_case": false
          },
          "type": {
            "name": "multiple",
            "single": true,
            "dropdown": false
          },
          "index": 0
        }
      ],
      "text": "Some interesting multiple choice questions.",
      "last_modify_date": "2019-09-16T21:00:21.148479Z",
      "mark": 50,
      "tags": [
        {
          "id": 2,
          "name": "color"
        }
      ]
    }


# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /haotianzhu/Scilo/1.0.0
schemes:
 - https