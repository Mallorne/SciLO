# Generated by Django 3.0.6 on 2020-05-19 20:25

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import polls.models.algorithm
import polls.models.gradepolicy
import polls.models.question
import polls.models.response
import polls.models.user
import polls.models.variable
from django.contrib.auth.models import Permission
from django.contrib.contenttypes.models import ContentType




def create_groups_and_permissions(apps, schema_editor):
    if ContentType.objects.filter(app_label='auth', model='user').exists():
        content_type = ContentType.objects.get(app_label='auth', model='user')
        Permission.objects.create(codename='scilo_basic_instuctor', name='instuctor permission', content_type=content_type)
        Permission.objects.create(codename='scilo_basic_student', name='student permission', content_type=content_type)



# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# polls.migrations.0060_permission2
# polls.migrations.0065_permission

class Migration(migrations.Migration):

    replaces = [('polls', '0001_initial'), ('polls', '0002_auto_20190121_1726'), ('polls', '0003_responseattempt'), ('polls', '0004_auto_20190121_2002'), ('polls', '0005_variable'), ('polls', '0006_auto_20190128_2007'), ('polls', '0007_auto_20190212_2248'), ('polls', '0008_auto_20190220_2228'), ('polls', '0009_auto_20190325_1541'), ('polls', '0010_auto_20190325_1836'), ('polls', '0011_remove_questionattempt_author'), ('polls', '0012_remove_responseattempt_author'), ('polls', '0013_auto_20190409_0039'), ('polls', '0014_response_weight'), ('polls', '0015_response_grade_policy'), ('polls', '0016_auto_20190518_2127'), ('polls', '0017_auto_20190518_2151'), ('polls', '0018_auto_20190518_2215'), ('polls', '0019_auto_20190518_2217'), ('polls', '0020_auto_20190528_0059'), ('polls', '0021_auto_20190528_0100'), ('polls', '0022_auto_20190528_0103'), ('polls', '0023_auto_20190528_0106'), ('polls', '0024_auto_20190528_0107'), ('polls', '0025_auto_20190528_0219'), ('polls', '0026_auto_20190530_0220'), ('polls', '0027_remove_question_weight'), ('polls', '0028_auto_20190604_0001'), ('polls', '0029_delete_variable'), ('polls', '0030_auto_20190604_0116'), ('polls', '0031_question_variables'), ('polls', '0032_auto_20190616_2106'), ('polls', '0033_auto_20190616_2109'), ('polls', '0034_auto_20190616_2130'), ('polls', '0035_auto_20190616_2133'), ('polls', '0036_auto_20190616_2140'), ('polls', '0037_auto_20190616_2142'), ('polls', '0038_auto_20190705_0443'), ('polls', '0039_remove_question_create_date'), ('polls', '0040_remove_quiz_create_date'), ('polls', '0041_remove_quiz_category'), ('polls', '0042_quiz_options'), ('polls', '0043_quiz_show_solution_date'), ('polls', '0044_auto_20190708_1942'), ('polls', '0045_quiz_later_time'), ('polls', '0046_auto_20190710_1806'), ('polls', '0047_userprofile_avatar'), ('polls', '0048_auto_20190717_1920'), ('polls', '0049_auto_20190802_2009'), ('polls', '0050_emailcode'), ('polls', '0051_userprofile_email_active'), ('polls', '0052_auto_20190807_1924'), ('polls', '0053_emailcode_available'), ('polls', '0054_auto_20190821_1805'), ('polls', '0055_attempt'), ('polls', '0056_permission'), ('polls', '0057_course'), ('polls', '0058_auto_20190904_2150'), ('polls', '0059_auto_20190910_1924'), ('polls', '0060_permission2'), ('polls', '0061_userprofile_is_instructor'), ('polls', '0062_auto_20190918_2007'), ('polls', '0063_question_course'), ('polls', '0064_auto_20190924_1854'), ('polls', '0065_permission'), ('polls', '0066_auto_20191008_0039'), ('polls', '0067_auto_20191008_0039'), ('polls', '0068_auto_20191015_1853'), ('polls', '0069_auto_20191101_2324'), ('polls', '0070_attempt_quiz_info'), ('polls', '0071_auto_20191125_0024'), ('polls', '0072_auto_20191125_0026'), ('polls', '0073_auto_20191125_0027'), ('polls', '0074_auto_20191125_0027'), ('polls', '0075_auto_20200302_2108'), ('polls', '0076_auto_20200302_2113'), ('polls', '0077_auto_20200302_2117'), ('polls', '0078_auto_20200302_2117'), ('polls', '0079_auto_20200302_2117'), ('polls', '0080_auto_20200302_2121'), ('polls', '0075_auto_20200225_1856'), ('polls', '0076_auto_20200225_2100'), ('polls', '0081_merge_20200303_0509'), ('polls', '0082_auto_20200518_2103'), ('polls', '0083_auto_20200519_0620'), ('polls', '0084_auto_20200519_0620'), ('polls', '0085_auto_20200519_2007')]

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('background', models.TextField(default='')),
                ('weight', models.PositiveSmallIntegerField(default=100)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_modify_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Quiz',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(default='')),
                ('weight', models.PositiveSmallIntegerField(default=100)),
                ('bonus', models.PositiveSmallIntegerField(default=0)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_modify_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.PositiveIntegerField()),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Question')),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Quiz')),
            ],
            options={
                'ordering': ('position',),
                'unique_together': {('quiz', 'question'), ('quiz', 'position')},
            },
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('content', models.TextField(blank=True, null=True)),
                ('algorithm', polls.models.algorithm.AlgorithmField(default=polls.models.algorithm.StringComparisonAlgorithm())),
                ('type', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='polls.Question')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_address', models.EmailField(error_messages={'required': 'Please provide your email address.', 'unique': 'An account with this email exist.'}, max_length=200, unique=True)),
                ('password', models.CharField(max_length=20)),
                ('first_name', models.CharField(max_length=30, null=True)),
                ('last_name', models.CharField(max_length=30, null=True)),
                ('institute', models.CharField(max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='QuizCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, null=True)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_modify_date', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.AddField(
            model_name='quiz',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='polls.User'),
        ),
        migrations.AddField(
            model_name='quiz',
            name='questions',
            field=models.ManyToManyField(through='polls.QuizQuestion', to='polls.Question'),
        ),
        migrations.AddField(
            model_name='question',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='polls.User'),
        ),
        migrations.AddField(
            model_name='question',
            name='quizzes',
            field=models.ManyToManyField(through='polls.QuizQuestion', to='polls.Quiz'),
        ),
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(max_length=500)),
                ('grade', models.FloatField()),
                ('comment', models.CharField(blank=True, max_length=200, null=True)),
                ('response', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='polls.Response')),
            ],
        ),
        migrations.CreateModel(
            name='QuizAttempt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.FloatField(default=0)),
            ],
        ),
        migrations.CreateModel(
            name='Variable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('value', models.CharField(max_length=200)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='variables', to='polls.Question')),
            ],
        ),
        migrations.AlterField(
            model_name='response',
            name='question',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='polls.Question'),
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('institute', models.CharField(blank=True, default='', max_length=50, null=True)),
                ('author', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
                ('avatar', models.ImageField(max_length=254, null=True, upload_to='storage', validators=[polls.models.user.validate_avatar_size], verbose_name='avatar')),
                ('email_active', models.BooleanField(default=False)),
            ],
        ),
        migrations.AlterField(
            model_name='question',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='QuestionAttempt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.FloatField(default=0)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_attempts', to='polls.Question')),
                ('quiz_attempt', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='question_attempts', to='polls.QuizAttempt')),
            ],
        ),
        migrations.CreateModel(
            name='QuestionCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, null=True)),
                ('create_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_modify_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='polls.QuestionCategory')),
            ],
        ),
        migrations.AlterField(
            model_name='quiz',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='ResponseAttempt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('grade', models.FloatField(default=0)),
                ('answers_string', models.TextField()),
            ],
        ),
        migrations.DeleteModel(
            name='User',
        ),
        migrations.RenameField(
            model_name='response',
            old_name='type',
            new_name='rtype',
        ),
        migrations.AlterUniqueTogether(
            name='response',
            unique_together={('question', 'name')},
        ),
        migrations.AlterField(
            model_name='quizquestion',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questionlinkback', to='polls.Question'),
        ),
        migrations.AlterField(
            model_name='quizquestion',
            name='quiz',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='quizlinkback', to='polls.Quiz'),
        ),
        migrations.AddField(
            model_name='response',
            name='weight',
            field=models.PositiveSmallIntegerField(default=100),
        ),
        migrations.AddField(
            model_name='response',
            name='grade_policy',
            field=polls.models.gradepolicy.GradePolicyField(default=polls.models.gradepolicy.GradePolicy(3, 0, 0.0, 'max')),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='test', max_length=20, unique=True)),
            ],
        ),
        migrations.DeleteModel(
            name='QuestionCategory',
        ),
        migrations.DeleteModel(
            name='QuizCategory',
        ),
        migrations.AddField(
            model_name='question',
            name='tags',
            field=models.ManyToManyField(to='polls.Tag'),
        ),
        migrations.RenameField(
            model_name='question',
            old_name='background',
            new_name='text',
        ),
        migrations.RenameField(
            model_name='response',
            old_name='content',
            new_name='text',
        ),
        migrations.AlterField(
            model_name='response',
            name='rtype',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name='response',
            name='index',
            field=models.IntegerField(default=0),
            preserve_default=False,
        ),
        migrations.AlterUniqueTogether(
            name='response',
            unique_together={('question', 'index')},
        ),
        migrations.RemoveField(
            model_name='response',
            name='name',
        ),
        migrations.RemoveField(
            model_name='question',
            name='weight',
        ),
        migrations.RenameField(
            model_name='response',
            old_name='weight',
            new_name='mark',
        ),
        migrations.DeleteModel(
            name='Variable',
        ),
        migrations.AlterField(
            model_name='response',
            name='rtype',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=polls.models.response.default_string_dict),
        ),
        migrations.AddField(
            model_name='question',
            name='variables',
            field=django.contrib.postgres.fields.ArrayField(base_field=polls.models.variable.VariableField(), blank=True, default=list, size=None),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(blank=True),
        ),
        migrations.AddField(
            model_name='quiz',
            name='begin_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='quiz',
            name='end_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.RemoveField(
            model_name='question',
            name='create_date',
        ),
        migrations.RemoveField(
            model_name='quiz',
            name='create_date',
        ),
        migrations.AddField(
            model_name='quiz',
            name='options',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name='quiz',
            name='show_solution_date',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.RemoveField(
            model_name='quiz',
            name='description',
        ),
        migrations.RemoveField(
            model_name='quiz',
            name='weight',
        ),
        migrations.AddField(
            model_name='quizquestion',
            name='mark',
            field=models.PositiveSmallIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='quiz',
            name='late_time',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.CreateModel(
            name='EmailCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=6)),
                ('author', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='email_code', to=settings.AUTH_USER_MODEL)),
                ('available', models.PositiveSmallIntegerField(default=3)),
            ],
        ),
        migrations.DeleteModel(
            name='QuestionAttempt',
        ),
        migrations.DeleteModel(
            name='QuizAttempt',
        ),
        migrations.DeleteModel(
            name='ResponseAttempt',
        ),
        migrations.CreateModel(
            name='Attempt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quiz_attempts', django.contrib.postgres.fields.jsonb.JSONField(default=dict)),
                ('quiz', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='polls.Quiz')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(create_groups_and_permissions),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fullname', models.CharField(max_length=200, unique=True)),
                ('shortname', models.CharField(max_length=50, unique=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(to='auth.Group')),
            ],
        ),
        migrations.RemoveField(
            model_name='quiz',
            name='author',
        ),
        migrations.AddField(
            model_name='quiz',
            name='course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='polls.Course'),
        ),
        migrations.RunPython(create_groups_and_permissions),

        migrations.AddField(
            model_name='userprofile',
            name='is_instructor',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='userprofile',
            name='avatar',
            field=models.ImageField(blank=True, max_length=254, null=True, upload_to='storage', validators=[polls.models.user.validate_avatar_size], verbose_name='avatar'),
        ),
        migrations.AddField(
            model_name='question',
            name='course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='polls.Course'),
        ),
        migrations.AlterField(
            model_name='quiz',
            name='course',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='quizzes', to='polls.Course'),
        ),
        migrations.RunPython(create_groups_and_permissions),
        migrations.AlterField(
            model_name='quiz',
            name='bonus',
            field=models.PositiveSmallIntegerField(blank=True, default=0),
        ),
        migrations.AlterField(
            model_name='quiz',
            name='bonus',
            field=models.PositiveSmallIntegerField(blank=True, default=0, null=True),
        ),
        migrations.AddField(
            model_name='attempt',
            name='quiz_info',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=django.contrib.postgres.fields.jsonb.JSONField(default=polls.models.question.default_para_dict),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=polls.models.question.default_para_dict),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=dict),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=polls.models.question.default_para_dict),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(blank=True, default='', null=True),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(blank=True, default='', null=True),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=django.contrib.postgres.fields.jsonb.JSONField(blank=True, default=polls.models.question.default_para_dict),
        ),
        migrations.RenameField(
            model_name='userprofile',
            old_name='is_instructor',
            new_name='is_admin',
        ),
        migrations.AlterField(
            model_name='question',
            name='text',
            field=models.TextField(blank=True, default=''),
        ),
        migrations.AlterModelManagers(
            name='userprofile',
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='userprofile',
            name='author',
        ),
        migrations.AddField(
            model_name='userprofile',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='email',
            field=models.EmailField(blank=True, max_length=254, verbose_name='email address'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='first_name',
            field=models.CharField(blank=True, max_length=30, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='password',
            field=models.CharField(default='password123', max_length=128, verbose_name='password'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='userprofile',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AddField(
            model_name='userprofile',
            name='username',
            field=models.CharField(default='admin', error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'student'), (2, 'nonediting ta'), (3, 'editing ta'), (4, 'instructor')], default=1)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='polls.Course')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='userprofile',
            name='roles',
            field=models.ManyToManyField(blank=True, related_name='userprofiles', to='polls.Role'),
        ),
    ]
